{"version":3,"file":"assets/lambda/js/chunks/form-field-Number.191095ecbbb8bf7d.js","mappings":"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","sources":["webpack:///./node_modules/accounting-js/dist/accounting.umd.js","webpack:///node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Number.vue","webpack:///./node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Number.vue?c9db","webpack:///./node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Number.vue","webpack:///./node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Number.vue?0240","webpack:///./node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Numeric.vue?04f7","webpack:///node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Numeric.vue","webpack:///./node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Numeric.vue?0d4a","webpack:///./node_modules/@lambda-platform/lambda-builder/src/modules/dataform/elements/Numeric.vue"],"sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.accounting = global.accounting || {})));\n}(this, function (exports) { 'use strict';\n\n\tfunction __commonjs(fn, module) { return module = { exports: {} }, fn(module, module.exports), module.exports; }\n\n\t/**\n\t * The library's settings configuration object.\n\t *\n\t * Contains default parameters for currency and number formatting\n\t */\n\tvar settings = {\n\t  symbol: '$', // default currency symbol is '$'\n\t  format: '%s%v', // controls output: %s = symbol, %v = value (can be object, see docs)\n\t  decimal: '.', // decimal point separator\n\t  thousand: ',', // thousands separator\n\t  precision: 2, // decimal places\n\t  grouping: 3, // digit grouping (not implemented yet)\n\t  stripZeros: false, // strip insignificant zeros from decimal part\n\t  fallback: 0 // value returned on unformat() failure\n\t};\n\n\t/**\n\t * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n\t * Alias: `accounting.parse(string)`\n\t *\n\t * Decimal must be included in the regular expression to match floats (defaults to\n\t * accounting.settings.decimal), so if the number uses a non-standard decimal\n\t * separator, provide it as the second argument.\n\t *\n\t * Also matches bracketed negatives (eg. '$ (1.99)' => -1.99)\n\t *\n\t * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n\t *\n\t * ```js\n\t *  accounting.unformat(\"£ 12,345,678.90 GBP\"); // 12345678.9\n\t * ```\n\t *\n\t * @method unformat\n\t * @for accounting\n\t * @param {String|Array<String>} value The string or array of strings containing the number/s to parse.\n\t * @param {Number}               decimal Number of decimal digits of the resultant number\n\t * @return {Float} The parsed number\n\t */\n\tfunction unformat(value) {\n\t  var decimal = arguments.length <= 1 || arguments[1] === undefined ? settings.decimal : arguments[1];\n\t  var fallback = arguments.length <= 2 || arguments[2] === undefined ? settings.fallback : arguments[2];\n\n\t  // Recursively unformat arrays:\n\t  if (Array.isArray(value)) {\n\t    return value.map(function (val) {\n\t      return unformat(val, decimal, fallback);\n\t    });\n\t  }\n\n\t  // Return the value as-is if it's already a number:\n\t  if (typeof value === 'number') return value;\n\n\t  // Build regex to strip out everything except digits, decimal point and minus sign:\n\t  var regex = new RegExp('[^0-9-(-)-' + decimal + ']', ['g']);\n\t  var unformattedValueString = ('' + value).replace(regex, '') // strip out any cruft\n\t  .replace(decimal, '.') // make sure decimal point is standard\n\t  .replace(/\\(([-]*\\d*[^)]?\\d+)\\)/g, '-$1') // replace bracketed values with negatives\n\t  .replace(/\\((.*)\\)/, ''); // remove any brackets that do not have numeric value\n\n\t  /**\n\t   * Handling -ve number and bracket, eg.\n\t   * (-100) = 100, -(100) = 100, --100 = 100\n\t   */\n\t  var negative = (unformattedValueString.match(/-/g) || 2).length % 2,\n\t      absUnformatted = parseFloat(unformattedValueString.replace(/-/g, '')),\n\t      unformatted = absUnformatted * (negative ? -1 : 1);\n\n\t  // This will fail silently which may cause trouble, let's wait and see:\n\t  return !isNaN(unformatted) ? unformatted : fallback;\n\t}\n\n\t/**\n\t * Check and normalise the value of precision (must be positive integer)\n\t */\n\tfunction _checkPrecision(val, base) {\n\t  val = Math.round(Math.abs(val));\n\t  return isNaN(val) ? base : val;\n\t}\n\n\t/**\n\t * Implementation of toFixed() that treats floats more like decimals\n\t *\n\t * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n\t * problems for accounting- and finance-related software.\n\t *\n\t * ```js\n\t *  (0.615).toFixed(2);           // \"0.61\" (native toFixed has rounding issues)\n\t *  accounting.toFixed(0.615, 2); // \"0.62\"\n\t * ```\n\t *\n\t * @method toFixed\n\t * @for accounting\n\t * @param {Float}   value         The float to be treated as a decimal number.\n\t * @param {Number} [precision=2] The number of decimal digits to keep.\n\t * @return {String} The given number transformed into a string with the given precission\n\t */\n\tfunction toFixed(value, precision) {\n\t  precision = _checkPrecision(precision, settings.precision);\n\t  var power = Math.pow(10, precision);\n\n\t  // Multiply up by precision, round accurately, then divide and use native toFixed():\n\t  return (Math.round((value + 1e-8) * power) / power).toFixed(precision);\n\t}\n\n\tvar index = __commonjs(function (module) {\n\t/* eslint-disable no-unused-vars */\n\t'use strict';\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\tvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n\tfunction toObject(val) {\n\t\tif (val === null || val === undefined) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\n\t\treturn Object(val);\n\t}\n\n\tmodule.exports = Object.assign || function (target, source) {\n\t\tvar from;\n\t\tvar to = toObject(target);\n\t\tvar symbols;\n\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = Object(arguments[s]);\n\n\t\t\tfor (var key in from) {\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\t\tto[key] = from[key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.getOwnPropertySymbols) {\n\t\t\t\tsymbols = Object.getOwnPropertySymbols(from);\n\t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn to;\n\t};\n\t});\n\n\tvar objectAssign = (index && typeof index === 'object' && 'default' in index ? index['default'] : index);\n\n\tfunction _stripInsignificantZeros(str, decimal) {\n\t  var parts = str.split(decimal);\n\t  var integerPart = parts[0];\n\t  var decimalPart = parts[1].replace(/0+$/, '');\n\n\t  if (decimalPart.length > 0) {\n\t    return integerPart + decimal + decimalPart;\n\t  }\n\n\t  return integerPart;\n\t}\n\n\t/**\n\t * Format a number, with comma-separated thousands and custom precision/decimal places\n\t * Alias: `accounting.format()`\n\t *\n\t * Localise by overriding the precision and thousand / decimal separators\n\t *\n\t * ```js\n\t * accounting.formatNumber(5318008);              // 5,318,008\n\t * accounting.formatNumber(9876543.21, { precision: 3, thousand: \" \" }); // 9 876 543.210\n\t * ```\n\t *\n\t * @method formatNumber\n\t * @for accounting\n\t * @param {Number}        number The number to be formatted.\n\t * @param {Object}        [opts={}] Object containing all the options of the method.\n\t * @return {String} The given number properly formatted.\n\t  */\n\tfunction formatNumber(number) {\n\t  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t  // Resursively format arrays:\n\t  if (Array.isArray(number)) {\n\t    return number.map(function (val) {\n\t      return formatNumber(val, opts);\n\t    });\n\t  }\n\n\t  // Build options object from second param (if object) or all params, extending defaults:\n\t  opts = objectAssign({}, settings, opts);\n\n\t  // Do some calc:\n\t  var negative = number < 0 ? '-' : '';\n\t  var base = parseInt(toFixed(Math.abs(number), opts.precision), 10) + '';\n\t  var mod = base.length > 3 ? base.length % 3 : 0;\n\n\t  // Format the number:\n\t  var formatted = negative + (mod ? base.substr(0, mod) + opts.thousand : '') + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, '$1' + opts.thousand) + (opts.precision > 0 ? opts.decimal + toFixed(Math.abs(number), opts.precision).split('.')[1] : '');\n\n\t  return opts.stripZeros ? _stripInsignificantZeros(formatted, opts.decimal) : formatted;\n\t}\n\n\tvar index$1 = __commonjs(function (module) {\n\t'use strict';\n\n\tvar strValue = String.prototype.valueOf;\n\tvar tryStringObject = function tryStringObject(value) {\n\t\ttry {\n\t\t\tstrValue.call(value);\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\tvar toStr = Object.prototype.toString;\n\tvar strClass = '[object String]';\n\tvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\n\tmodule.exports = function isString(value) {\n\t\tif (typeof value === 'string') { return true; }\n\t\tif (typeof value !== 'object') { return false; }\n\t\treturn hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;\n\t};\n\t});\n\n\tvar isString = (index$1 && typeof index$1 === 'object' && 'default' in index$1 ? index$1['default'] : index$1);\n\n\t/**\n\t * Parses a format string or object and returns format obj for use in rendering\n\t *\n\t * `format` is either a string with the default (positive) format, or object\n\t * containing `pos` (required), `neg` and `zero` values\n\t *\n\t * Either string or format.pos must contain \"%v\" (value) to be valid\n\t *\n\t * @method _checkCurrencyFormat\n\t * @for accounting\n\t * @param {String}        [format=\"%s%v\"] String with the format to apply, where %s is the currency symbol and %v is the value.\n\t * @return {Object} object represnting format (with pos, neg and zero attributes)\n\t */\n\tfunction _checkCurrencyFormat(format) {\n\t  // Format should be a string, in which case `value` ('%v') must be present:\n\t  if (isString(format) && format.match('%v')) {\n\t    // Create and return positive, negative and zero formats:\n\t    return {\n\t      pos: format,\n\t      neg: format.replace('-', '').replace('%v', '-%v'),\n\t      zero: format\n\t    };\n\t  }\n\n\t  // Otherwise, assume format was fine:\n\t  return format;\n\t}\n\n\t/**\n\t * Format a number into currency\n\t *\n\t * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n\t * defaults: (0, '$', 2, ',', '.', '%s%v')\n\t *\n\t * Localise by overriding the symbol, precision, thousand / decimal separators and format\n\t *\n\t * ```js\n\t * // Default usage:\n\t * accounting.formatMoney(12345678); // $12,345,678.00\n\t *\n\t * // European formatting (custom symbol and separators), can also use options object as second parameter:\n\t * accounting.formatMoney(4999.99, { symbol: \"€\", precision: 2, thousand: \".\", decimal: \",\" }); // €4.999,99\n\t *\n\t * // Negative values can be formatted nicely:\n\t * accounting.formatMoney(-500000, { symbol: \"£ \", precision: 0 }); // £ -500,000\n\t *\n\t * // Simple `format` string allows control of symbol position (%v = value, %s = symbol):\n\t * accounting.formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" }); // 5,318,008.00 GBP\n\t * ```\n\t *\n\t * @method formatMoney\n\t * @for accounting\n\t * @param {Number}        number Number to be formatted.\n\t * @param {Object}        [opts={}] Object containing all the options of the method.\n\t * @return {String} The given number properly formatted as money.\n\t */\n\tfunction formatMoney(number) {\n\t  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t  // Resursively format arrays:\n\t  if (Array.isArray(number)) {\n\t    return number.map(function (val) {\n\t      return formatMoney(val, opts);\n\t    });\n\t  }\n\n\t  // Build options object from second param (if object) or all params, extending defaults:\n\t  opts = objectAssign({}, settings, opts);\n\n\t  // Check format (returns object with pos, neg and zero):\n\t  var formats = _checkCurrencyFormat(opts.format);\n\n\t  // Choose which format to use for this value:\n\t  var useFormat = undefined;\n\n\t  if (number > 0) {\n\t    useFormat = formats.pos;\n\t  } else if (number < 0) {\n\t    useFormat = formats.neg;\n\t  } else {\n\t    useFormat = formats.zero;\n\t  }\n\n\t  // Return with currency symbol added:\n\t  return useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), opts));\n\t}\n\n\t/**\n\t * Format a list of numbers into an accounting column, padding with whitespace\n\t * to line up currency symbols, thousand separators and decimals places\n\t *\n\t * List should be an array of numbers\n\t *\n\t * Returns array of accouting-formatted number strings of same length\n\t *\n\t * NB: `white-space:pre` CSS rule is required on the list container to prevent\n\t * browsers from collapsing the whitespace in the output strings.\n\t *\n\t * ```js\n\t * accounting.formatColumn([123.5, 3456.49, 777888.99, 12345678, -5432], { symbol: \"$ \" });\n\t * ```\n\t *\n\t * @method formatColumn\n\t * @for accounting\n\t * @param {Array<Number>} list An array of numbers to format\n\t * @param {Object}        [opts={}] Object containing all the options of the method.\n\t * @param {Object|String} [symbol=\"$\"] String with the currency symbol. For conveniency if can be an object containing all the options of the method.\n\t * @param {Integer}       [precision=2] Number of decimal digits\n\t * @param {String}        [thousand=','] String with the thousands separator.\n\t * @param {String}        [decimal=\".\"] String with the decimal separator.\n\t * @param {String}        [format=\"%s%v\"] String with the format to apply, where %s is the currency symbol and %v is the value.\n\t * @return {Array<String>} array of accouting-formatted number strings of same length\n\t */\n\tfunction formatColumn(list) {\n\t  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t  if (!list) return [];\n\n\t  // Build options object from second param (if object) or all params, extending defaults:\n\t  opts = objectAssign({}, settings, opts);\n\n\t  // Check format (returns object with pos, neg and zero), only need pos for now:\n\t  var formats = _checkCurrencyFormat(opts.format);\n\n\t  // Whether to pad at start of string or after currency symbol:\n\t  var padAfterSymbol = formats.pos.indexOf('%s') < formats.pos.indexOf('%v');\n\n\t  // Store value for the length of the longest string in the column:\n\t  var maxLength = 0;\n\n\t  // Format the list according to options, store the length of the longest string:\n\t  var formatted = list.map(function (val) {\n\t    if (Array.isArray(val)) {\n\t      // Recursively format columns if list is a multi-dimensional array:\n\t      return formatColumn(val, opts);\n\t    }\n\t    // Clean up the value\n\t    val = unformat(val, opts.decimal);\n\n\t    // Choose which format to use for this value (pos, neg or zero):\n\t    var useFormat = undefined;\n\n\t    if (val > 0) {\n\t      useFormat = formats.pos;\n\t    } else if (val < 0) {\n\t      useFormat = formats.neg;\n\t    } else {\n\t      useFormat = formats.zero;\n\t    }\n\n\t    // Format this value, push into formatted list and save the length:\n\t    var fVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), opts));\n\n\t    if (fVal.length > maxLength) {\n\t      maxLength = fVal.length;\n\t    }\n\n\t    return fVal;\n\t  });\n\n\t  // Pad each number in the list and send back the column of numbers:\n\t  return formatted.map(function (val) {\n\t    // Only if this is a string (not a nested array, which would have already been padded):\n\t    if (isString(val) && val.length < maxLength) {\n\t      // Depending on symbol position, pad after symbol or at index 0:\n\t      return padAfterSymbol ? val.replace(opts.symbol, opts.symbol + new Array(maxLength - val.length + 1).join(' ')) : new Array(maxLength - val.length + 1).join(' ') + val;\n\t    }\n\t    return val;\n\t  });\n\t}\n\n\texports.settings = settings;\n\texports.unformat = unformat;\n\texports.toFixed = toFixed;\n\texports.formatMoney = formatMoney;\n\texports.formatNumber = formatNumber;\n\texports.formatColumn = formatColumn;\n\texports.format = formatMoney;\n\texports.parse = unformat;\n\n}));\n//# sourceMappingURL=accounting.umd.js.map","<template>\n    <FormItem :label=label :prop=rule>\n        <Input type=\"number\" v-if=\"meta.no_format\"\n               v-model=\"model.form[model.component]\"\n               :disabled=\"meta && meta.disabled ? meta.disabled : false\" :number=\"true\" />\n        <numeric\n            v-else\n                currency=\"\"\n                currencySymbolPosition=\"suffix\"\n                :precision=\"meta.precision >= 0 ? meta.precision : 0\"\n                separator=\",\"\n                v-model=\"model.form[model.component]\"\n                :disabled=\"meta && meta.disabled ? meta.disabled : false\"></numeric>\n    </FormItem>\n</template>\n\n<script>\n    import Numeric from \"./Numeric\";\n    export default {\n        props: [\"model\", \"label\", \"rule\", \"meta\"],\n        components: {\n            Numeric\n        },\n        data() {\n            return {\n                price: \"\"\n            };\n        }\n    };\n</script>\n","import mod from \"-!../../../../../../vue-loader/lib/index.js??vue-loader-options!./Number.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../vue-loader/lib/index.js??vue-loader-options!./Number.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Number.vue?vue&type=template&id=7f59b4fa&\"\nimport script from \"./Number.vue?vue&type=script&lang=js&\"\nexport * from \"./Number.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('FormItem',{attrs:{\"label\":_vm.label,\"prop\":_vm.rule}},[(_vm.meta.no_format)?_c('Input',{attrs:{\"type\":\"number\",\"disabled\":_vm.meta && _vm.meta.disabled ? _vm.meta.disabled : false,\"number\":true},model:{value:(_vm.model.form[_vm.model.component]),callback:function ($$v) {_vm.$set(_vm.model.form, _vm.model.component, $$v)},expression:\"model.form[model.component]\"}}):_c('numeric',{attrs:{\"currency\":\"\",\"currencySymbolPosition\":\"suffix\",\"precision\":_vm.meta.precision >= 0 ? _vm.meta.precision : 0,\"separator\":\",\",\"disabled\":_vm.meta && _vm.meta.disabled ? _vm.meta.disabled : false},model:{value:(_vm.model.form[_vm.model.component]),callback:function ($$v) {_vm.$set(_vm.model.form, _vm.model.component, $$v)},expression:\"model.form[model.component]\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"ivu-input-wrapper ivu-input-type\"},[_c('i',{staticClass:\"ivu-icon ivu-icon-load-c ivu-load-loop ivu-input-icon ivu-input-icon-validate\"}),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.amount),expression:\"amount\"}],ref:\"numeric\",staticClass:\"ivu-input\",attrs:{\"disabled\":_vm.disabled,\"placeholder\":_vm.placeholder,\"type\":\"tel\"},domProps:{\"value\":(_vm.amount)},on:{\"blur\":_vm.onBlurHandler,\"input\":[function($event){if($event.target.composing){ return; }_vm.amount=$event.target.value},_vm.onInputHandler],\"focus\":_vm.onFocusHandler}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n<div class=\"ivu-input-wrapper ivu-input-type\">\n    <i class=\"ivu-icon ivu-icon-load-c ivu-load-loop ivu-input-icon ivu-input-icon-validate\"></i>\n    <input class=\"ivu-input\"\n           :disabled=\"disabled\"\n           :placeholder=\"placeholder\"\n           @blur=\"onBlurHandler\" @input=\"onInputHandler\" @focus=\"onFocusHandler\" ref=\"numeric\" type=\"tel\" v-model=\"amount\"/>\n</div>\n</template>\n\n<script>\nimport accounting from \"accounting-js\";\n\nexport default {\n    name: \"VueNumeric\",\n\n    props: {\n        /**\n         * Currency symbol.\n         */\n        currency: {\n            // type: String,\n            default: \"\",\n            required: false\n        },\n        disabled: {\n            // type: String,\n            default: false,\n            required: false\n        },\n\n        /**\n         * Maximum value allowed.\n         */\n        max: {\n//            type: Number,\n            default: Number.MAX_SAFE_INTEGER || 9007199254740991,\n            required: false\n        },\n\n        /**\n         * Minimum value allowed.\n         */\n        min: {\n//            type: Number,\n            default: Number.MIN_SAFE_INTEGER || -9007199254740991,\n            required: false\n        },\n\n        /**\n         * Enable/Disable minus value.\n         */\n        minus: {\n            type: Boolean,\n            default: false,\n            required: false\n        },\n\n        /**\n         * Input placeholder.\n         */\n        placeholder: {\n            type: String,\n            default: \"\",\n            required: false\n        },\n\n        /**\n         * Value when the input is empty\n         */\n        emptyValue: {\n            type: [Number, String],\n            default: \"\",\n            required: false\n        },\n\n        /**\n         * Number of decimals.\n         * Decimals symbol are the opposite of separator symbol.\n         */\n        precision: {\n            type: Number,\n            default: 0,\n            required: false\n        },\n\n        /**\n         * Thousand separator type.\n         * Separator props accept either . or , (default).\n         */\n        separator: {\n            type: String,\n            default: \",\",\n            required: false\n        },\n\n        /**\n         * Forced thousand separator.\n         * Accepts any string.\n         */\n        thousandSeparator: {\n            default: undefined,\n            required: false,\n            type: String\n        },\n\n        /**\n         * Forced decimal separator.\n         * Accepts any string.\n         */\n        decimalSeparator: {\n            default: undefined,\n            required: false,\n            type: String\n        },\n\n        /**\n         * The output type used for v-model.\n         * It can either be String or Number (default).\n         */\n        outputType: {\n            required: false,\n            type: String,\n            default: \"Number\"\n        },\n\n        /**\n         * v-model value.\n         */\n        value: {\n            type: [Number, String],\n            default: 0,\n            required: false\n        },\n\n        /**\n         * Hide input and show value in text only.\n         */\n        readOnly: {\n            type: Boolean,\n            default: false,\n            required: false\n        },\n\n        /**\n         * Class for the span tag when readOnly props is true.\n         */\n        readOnlyClass: {\n            type: String,\n            default: \"\",\n            required: false\n        },\n\n        /**\n         * Position of currency symbol\n         * Symbol position props accept either 'suffix' or 'prefix' (default).\n         */\n        currencySymbolPosition: {\n            type: String,\n            default: \"prefix\",\n            required: false\n        }\n    },\n\n    data: () => ({\n        amount: \"\"\n    }),\n\n    computed: {\n        /**\n         * Number type of formatted value.\n         * @return {Number}\n         */\n        amountNumber() {\n            return this.unformat(this.amount);\n        },\n\n        /**\n         * Number type of value props.\n         * @return {Number}\n         */\n        valueNumber() {\n            return this.unformat(this.value);\n        },\n\n        /**\n         * Define decimal separator based on separator props.\n         * @return {String} '.' or ','\n         */\n        decimalSeparatorSymbol() {\n            if (typeof this.decimalSeparator !== \"undefined\")\n                return this.decimalSeparator;\n            if (this.separator === \",\") return \".\";\n            return \",\";\n        },\n\n        /**\n         * Define thousand separator based on separator props.\n         * @return {String} '.' or ','\n         */\n        thousandSeparatorSymbol() {\n            if (typeof this.thousandSeparator !== \"undefined\")\n                return this.thousandSeparator;\n            if (this.separator === \".\") return \".\";\n            if (this.separator === \"space\") return \" \";\n            return \",\";\n        },\n\n        /**\n         * Define format position for currency symbol and value.\n         * @return {String} format\n         */\n        symbolPosition() {\n            if (!this.currency) return \"%v\";\n            return this.currencySymbolPosition === \"suffix\" ? \"%v %s\" : \"%s %v\";\n        }\n    },\n\n    watch: {\n        /**\n         * Watch for value change from other input with same v-model.\n         * @param {Number} newValue\n         */\n        valueNumber(newValue) {\n            if (this.$refs.numeric !== document.activeElement) {\n                this.amount = this.format(newValue);\n            }\n        },\n\n        /**\n         * When readOnly is true, replace the span tag class.\n         * @param {Boolean} newValue\n         * @param {Boolean} oldValue\n         */\n        readOnly(newValue, oldValue) {\n            if (oldValue === false && newValue === true) {\n                this.$nextTick(() => {\n                    this.$refs.readOnly.className = this.readOnlyClass;\n                });\n            }\n        },\n\n        /**\n         * Immediately reflect separator changes\n         */\n        separator() {\n            this.process(this.valueNumber);\n            this.amount = this.format(this.valueNumber);\n        },\n\n        /**\n         * Immediately reflect currency changes\n         */\n        currency() {\n            this.process(this.valueNumber);\n            this.amount = this.format(this.valueNumber);\n        },\n\n        /**\n         * Immediately reflect precision changes\n         */\n        precision() {\n            this.process(this.valueNumber);\n            this.amount = this.format(this.valueNumber);\n        }\n    },\n\n    mounted() {\n        // Set default value props when placeholder undefined.\n        if (!this.placeholder) {\n            this.process(this.valueNumber);\n            this.amount = this.format(this.valueNumber);\n\n            // In case of delayed props value.\n            setTimeout(() => {\n                this.process(this.valueNumber);\n                this.amount = this.format(this.valueNumber);\n            }, 500);\n        }\n\n        // Set read-only span element's class\n        if (this.readOnly) this.$refs.readOnly.className = this.readOnlyClass;\n    },\n\n    methods: {\n        /**\n         * Handle blur event.\n         * @param {Object} e\n         */\n        onBlurHandler(e) {\n            this.$emit(\"blur\", e);\n            this.amount = this.format(this.valueNumber);\n        },\n\n        /**\n         * Handle focus event.\n         * @param {Object} e\n         */\n        onFocusHandler(e) {\n            this.$emit(\"focus\", e);\n            if (this.valueNumber === 0) {\n                this.amount = null;\n            } else {\n                this.amount = accounting.formatMoney(this.valueNumber, {\n                    symbol: \"\",\n                    format: \"%v\",\n                    thousand: \"\",\n                    decimal: this.decimalSeparatorSymbol,\n                    precision: Number(this.precision)\n                });\n            }\n        },\n\n        /**\n         * Handle input event.\n         */\n        onInputHandler() {\n            this.process(this.amountNumber);\n        },\n\n        /**\n         * Validate value before update the component.\n         * @param {Number} value\n         */\n        process(value) {\n            if (value >= this.max) this.update(this.max);\n            if (value <= this.min) this.update(this.min);\n            if (value > this.min && value < this.max) this.update(value);\n            if (!this.minus && value < 0)\n                this.min >= 0 ? this.update(this.min) : this.update(0);\n        },\n\n        /**\n         * Update parent component model value.\n         * @param {Number} value\n         */\n        update(value) {\n            const fixedValue = accounting.toFixed(value, this.precision);\n            const output =\n                this.outputType.toLowerCase() === \"string\"\n                    ? fixedValue\n                    : Number(fixedValue);\n            this.$emit(\"input\", output);\n        },\n\n        /**\n         * Format value using symbol and separator.\n         * @param {Number} value\n         * @return {String}\n         */\n        format(value) {\n            return accounting.formatMoney(value, {\n                symbol: this.currency,\n                format: this.symbolPosition,\n                precision: Number(this.precision),\n                decimal: this.decimalSeparatorSymbol,\n                thousand: this.thousandSeparatorSymbol\n            });\n        },\n\n        /**\n         * Remove symbol and separator.\n         * @param {Number} value\n         * @return {Number}\n         */\n        unformat(value) {\n            const toUnformat =\n                typeof value === \"string\" && value === \"\"\n                    ? this.emptyValue\n                    : value;\n            return accounting.unformat(toUnformat, this.decimalSeparatorSymbol);\n        }\n    }\n};\n</script>\n","import mod from \"-!../../../../../../vue-loader/lib/index.js??vue-loader-options!./Numeric.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../vue-loader/lib/index.js??vue-loader-options!./Numeric.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Numeric.vue?vue&type=template&id=57a81e92&\"\nimport script from \"./Numeric.vue?vue&type=script&lang=js&\"\nexport * from \"./Numeric.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["exports","__commonjs","fn","module","settings","symbol","format","decimal","thousand","precision","grouping","stripZeros","fallback","unformat","value","arguments","length","undefined","Array","isArray","map","val","regex","RegExp","unformattedValueString","replace","negative","match","unformatted","parseFloat","isNaN","_checkPrecision","base","Math","round","abs","toFixed","power","pow","index","hasOwnProperty","Object","prototype","propIsEnumerable","propertyIsEnumerable","toObject","TypeError","assign","target","source","from","symbols","to","s","key","call","getOwnPropertySymbols","i","objectAssign","_stripInsignificantZeros","str","parts","split","integerPart","decimalPart","formatNumber","number","opts","parseInt","mod","formatted","substr","index$1","strValue","String","valueOf","tryStringObject","e","toStr","toString","strClass","hasToStringTag","Symbol","toStringTag","isString","_checkCurrencyFormat","pos","neg","zero","formatMoney","formats","formatColumn","list","padAfterSymbol","indexOf","maxLength","fVal","join","parse","factory","_vm","this","_h","$createElement","_c","_self","attrs","label","rule","meta","disabled","model","form","component","callback","$$v","$set","expression","name","props","currency","default","required","max","Number","MAX_SAFE_INTEGER","min","MIN_SAFE_INTEGER","minus","type","Boolean","placeholder","emptyValue","separator","thousandSeparator","decimalSeparator","outputType","readOnly","readOnlyClass","currencySymbolPosition","data","amount","computed","amountNumber","valueNumber","decimalSeparatorSymbol","thousandSeparatorSymbol","symbolPosition","watch","newValue","$refs","numeric","document","activeElement","oldValue","$nextTick","className","process","mounted","setTimeout","methods","onBlurHandler","$emit","onFocusHandler","onInputHandler","update","fixedValue","output","toLowerCase","toUnformat","staticClass","_v","directives","rawName","ref","domProps","on","$event","composing"],"sourceRoot":""}