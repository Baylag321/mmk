// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"lambda/lambda/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputfilter(ctx context.Context, obj interface{}) (model.Filter, error) {
	var it model.Filter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"column", "condition", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
			it.Condition, err = ec.unmarshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgroupFilter(ctx context.Context, obj interface{}) (model.GroupFilter, error) {
	var it model.GroupFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filters", "combine"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filters":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
			it.Filters, err = ec.unmarshalNfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "combine":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("combine"))
			it.Combine, err = ec.unmarshalNcombine2lambdaᚋlambdaᚋgraphᚋmodelᚐCombine(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubFilter(ctx context.Context, obj interface{}) (model.SubFilter, error) {
	var it model.SubFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"column", "table", "condition", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "table":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("table"))
			it.Table, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
			it.Condition, err = ec.unmarshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNcombine2lambdaᚋlambdaᚋgraphᚋmodelᚐCombine(ctx context.Context, v interface{}) (model.Combine, error) {
	var res model.Combine
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNcombine2lambdaᚋlambdaᚋgraphᚋmodelᚐCombine(ctx context.Context, sel ast.SelectionSet, v model.Combine) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx context.Context, v interface{}) (model.Condition, error) {
	var res model.Condition
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx context.Context, sel ast.SelectionSet, v model.Condition) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) ([]*model.Filter, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Filter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOfilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) ([]*model.Filter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Filter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOfilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOfilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) (*model.Filter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputfilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx context.Context, v interface{}) ([]*model.GroupFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.GroupFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOgroupFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOgroupFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx context.Context, v interface{}) (*model.GroupFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgroupFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx context.Context, v interface{}) ([]*model.SubFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SubFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx context.Context, v interface{}) (*model.SubFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
