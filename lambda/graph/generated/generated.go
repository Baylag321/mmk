// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"lambda/lambda/graph/model"
	"lambda/lambda/graph/models"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/lambda-platform/lambda/DB"
	"github.com/lambda-platform/lambda/graphql/custom_model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	HamtragchBaiguullaga struct {
		BNer      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Link      func(childComplexity int) int
		Logo      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	LutAngi struct {
		Angi func(childComplexity int) int
		ID   func(childComplexity int) int
	}

	LutDocumentSorting struct {
		DocumentSorting   func(childComplexity int) int
		DocumentSortingEn func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	LutNewsType struct {
		ID       func(childComplexity int) int
		NewsType func(childComplexity int) int
	}

	Query struct {
		HamtragchBaiguullaga                 func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		LutAngi                              func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		LutDocumentSorting                   func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		LutNewsType                          func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		Paginate                             func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, page int, size int) int
		SubNewsSocialTypies                  func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		SubOronNutagGamshigErsdel            func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		SubOronNutagTogtool                  func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		SubOronNutagUaHeregjilt              func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		SubOronNutagUaTolvolgoo              func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		SubUndesZovlolGamshigErsdelBuuruulah func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		SubUndesZovlolHuraldaan              func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		ViewEzBodlogiinBb                    func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) int
		ViewNews                             func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, limit *int, offset *int) int
		ViewOronNutagZovlol                  func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, limit *int, offset *int) int
		ViewUndesniiZovlol                   func(childComplexity int, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, limit *int, offset *int) int
	}

	SubNewsSocialTypies struct {
		ID           func(childComplexity int) int
		NewsID       func(childComplexity int) int
		SocialTypeID func(childComplexity int) int
	}

	SubOronNutagGamshigErsdel struct {
		ID        func(childComplexity int) int
		OZovlolID func(childComplexity int) int
		Ognoo     func(childComplexity int) int
		Tosov     func(childComplexity int) int
	}

	SubOronNutagTogtool struct {
		ID        func(childComplexity int) int
		OZovlolID func(childComplexity int) int
		TailbarEn func(childComplexity int) int
		TailbarMn func(childComplexity int) int
		Togtool   func(childComplexity int) int
	}

	SubOronNutagUaHeregjilt struct {
		HuviMn    func(childComplexity int) int
		ID        func(childComplexity int) int
		OZovlolID func(childComplexity int) int
		Tailbar   func(childComplexity int) int
		TailbarEn func(childComplexity int) int
	}

	SubOronNutagUaTolvolgoo struct {
		ID        func(childComplexity int) int
		OZovlolID func(childComplexity int) int
		TailbarEn func(childComplexity int) int
		TailbarMn func(childComplexity int) int
		Tolvolgoo func(childComplexity int) int
	}

	SubUndesZovlolGamshigErsdelBuuruulah struct {
		ID            func(childComplexity int) int
		TailbarEn     func(childComplexity int) int
		TailbarMn     func(childComplexity int) int
		TogtoolFile   func(childComplexity int) int
		UndesZovlolID func(childComplexity int) int
	}

	SubUndesZovlolHuraldaan struct {
		Huraldaan     func(childComplexity int) int
		HuraldaanEn   func(childComplexity int) int
		ID            func(childComplexity int) int
		UndesZovlolID func(childComplexity int) int
		Zovlomj       func(childComplexity int) int
	}

	ViewEzBodlogiinBb struct {
		BarimtNerEn          func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DocumentSorting      func(childComplexity int) int
		DocumentSortingEn    func(childComplexity int) int
		DocumentSortingID    func(childComplexity int) int
		EzBarimtBichgiinNer  func(childComplexity int) int
		FileEn               func(childComplexity int) int
		Hawsralt             func(childComplexity int) int
		ID                   func(childComplexity int) int
		SubDocumentSortingID func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	ViewNews struct {
		CreatedAt           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		Delgerengui         func(childComplexity int) int
		Garchig             func(childComplexity int) int
		Handalt             func(childComplexity int) int
		ID                  func(childComplexity int) int
		Logo                func(childComplexity int) int
		NewsType            func(childComplexity int) int
		NewsTypeID          func(childComplexity int) int
		Share               func(childComplexity int) int
		SubNewsSocialTypies func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UrsahEseh           func(childComplexity int) int
		Zurag               func(childComplexity int) int
	}

	ViewOronNutagZovlol struct {
		AimagID                   func(childComplexity int) int
		Aimagname                 func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		SubOronNutagGamshigErsdel func(childComplexity int) int
		SubOronNutagTogtool       func(childComplexity int) int
		SubOronNutagUaHeregjilt   func(childComplexity int) int
		SubOronNutagUaTolvolgoo   func(childComplexity int) int
		SumID                     func(childComplexity int) int
		Sumname                   func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
	}

	ViewUndesniiZovlol struct {
		CreatedAt                            func(childComplexity int) int
		DeletedAt                            func(childComplexity int) int
		Huraldaan                            func(childComplexity int) int
		ID                                   func(childComplexity int) int
		SubUndesZovlolGamshigErsdelBuuruulah func(childComplexity int) int
		SubUndesZovlolHuraldaan              func(childComplexity int) int
		TailbarMnBureldehuun                 func(childComplexity int) int
		UpdatedAt                            func(childComplexity int) int
	}

	Deleted struct {
		ID func(childComplexity int) int
	}

	Paginate struct {
		HamtragchBaiguullaga                 func(childComplexity int) int
		LastPage                             func(childComplexity int) int
		LutAngi                              func(childComplexity int) int
		LutDocumentSorting                   func(childComplexity int) int
		LutNewsType                          func(childComplexity int) int
		Page                                 func(childComplexity int) int
		SubNewsSocialTypies                  func(childComplexity int) int
		SubOronNutagGamshigErsdel            func(childComplexity int) int
		SubOronNutagTogtool                  func(childComplexity int) int
		SubOronNutagUaHeregjilt              func(childComplexity int) int
		SubOronNutagUaTolvolgoo              func(childComplexity int) int
		SubUndesZovlolGamshigErsdelBuuruulah func(childComplexity int) int
		SubUndesZovlolHuraldaan              func(childComplexity int) int
		Total                                func(childComplexity int) int
		ViewEzBodlogiinBb                    func(childComplexity int) int
		ViewNews                             func(childComplexity int) int
		ViewOronNutagZovlol                  func(childComplexity int) int
		ViewUndesniiZovlol                   func(childComplexity int) int
	}

	SubTable struct {
		ConnectionField func(childComplexity int) int
		ParentIdentity  func(childComplexity int) int
		Table           func(childComplexity int) int
	}
}

type QueryResolver interface {
	LutDocumentSorting(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.LutDocumentSorting, error)
	ViewEzBodlogiinBb(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.ViewEzBodlogiinBb, error)
	HamtragchBaiguullaga(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.HamtragchBaiguullaga, error)
	SubOronNutagGamshigErsdel(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.SubOronNutagGamshigErsdel, error)
	SubOronNutagTogtool(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.SubOronNutagTogtool, error)
	SubOronNutagUaHeregjilt(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.SubOronNutagUaHeregjilt, error)
	SubOronNutagUaTolvolgoo(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.SubOronNutagUaTolvolgoo, error)
	ViewOronNutagZovlol(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, limit *int, offset *int) ([]*models.ViewOronNutagZovlol, error)
	SubUndesZovlolHuraldaan(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.SubUndesZovlolHuraldaan, error)
	SubUndesZovlolGamshigErsdelBuuruulah(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.SubUndesZovlolGamshigErsdelBuuruulah, error)
	ViewUndesniiZovlol(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, limit *int, offset *int) ([]*models.ViewUndesniiZovlol, error)
	LutAngi(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.LutAngi, error)
	SubNewsSocialTypies(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.SubNewsSocialTypies, error)
	ViewNews(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, limit *int, offset *int) ([]*models.ViewNews, error)
	LutNewsType(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.LutNewsType, error)
	Paginate(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, page int, size int) (*model.Paginate, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "HamtragchBaiguullaga.b_ner":
		if e.complexity.HamtragchBaiguullaga.BNer == nil {
			break
		}

		return e.complexity.HamtragchBaiguullaga.BNer(childComplexity), true

	case "HamtragchBaiguullaga.created_at":
		if e.complexity.HamtragchBaiguullaga.CreatedAt == nil {
			break
		}

		return e.complexity.HamtragchBaiguullaga.CreatedAt(childComplexity), true

	case "HamtragchBaiguullaga.deleted_at":
		if e.complexity.HamtragchBaiguullaga.DeletedAt == nil {
			break
		}

		return e.complexity.HamtragchBaiguullaga.DeletedAt(childComplexity), true

	case "HamtragchBaiguullaga.id":
		if e.complexity.HamtragchBaiguullaga.ID == nil {
			break
		}

		return e.complexity.HamtragchBaiguullaga.ID(childComplexity), true

	case "HamtragchBaiguullaga.link":
		if e.complexity.HamtragchBaiguullaga.Link == nil {
			break
		}

		return e.complexity.HamtragchBaiguullaga.Link(childComplexity), true

	case "HamtragchBaiguullaga.logo":
		if e.complexity.HamtragchBaiguullaga.Logo == nil {
			break
		}

		return e.complexity.HamtragchBaiguullaga.Logo(childComplexity), true

	case "HamtragchBaiguullaga.updated_at":
		if e.complexity.HamtragchBaiguullaga.UpdatedAt == nil {
			break
		}

		return e.complexity.HamtragchBaiguullaga.UpdatedAt(childComplexity), true

	case "LutAngi.angi":
		if e.complexity.LutAngi.Angi == nil {
			break
		}

		return e.complexity.LutAngi.Angi(childComplexity), true

	case "LutAngi.id":
		if e.complexity.LutAngi.ID == nil {
			break
		}

		return e.complexity.LutAngi.ID(childComplexity), true

	case "LutDocumentSorting.document_sorting":
		if e.complexity.LutDocumentSorting.DocumentSorting == nil {
			break
		}

		return e.complexity.LutDocumentSorting.DocumentSorting(childComplexity), true

	case "LutDocumentSorting.document_sorting_en":
		if e.complexity.LutDocumentSorting.DocumentSortingEn == nil {
			break
		}

		return e.complexity.LutDocumentSorting.DocumentSortingEn(childComplexity), true

	case "LutDocumentSorting.id":
		if e.complexity.LutDocumentSorting.ID == nil {
			break
		}

		return e.complexity.LutDocumentSorting.ID(childComplexity), true

	case "LutNewsType.id":
		if e.complexity.LutNewsType.ID == nil {
			break
		}

		return e.complexity.LutNewsType.ID(childComplexity), true

	case "LutNewsType.news_type":
		if e.complexity.LutNewsType.NewsType == nil {
			break
		}

		return e.complexity.LutNewsType.NewsType(childComplexity), true

	case "Query.hamtragch_baiguullaga":
		if e.complexity.Query.HamtragchBaiguullaga == nil {
			break
		}

		args, err := ec.field_Query_hamtragch_baiguullaga_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HamtragchBaiguullaga(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.lut_angi":
		if e.complexity.Query.LutAngi == nil {
			break
		}

		args, err := ec.field_Query_lut_angi_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LutAngi(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.lut_document_sorting":
		if e.complexity.Query.LutDocumentSorting == nil {
			break
		}

		args, err := ec.field_Query_lut_document_sorting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LutDocumentSorting(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.lut_news_type":
		if e.complexity.Query.LutNewsType == nil {
			break
		}

		args, err := ec.field_Query_lut_news_type_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LutNewsType(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.paginate":
		if e.complexity.Query.Paginate == nil {
			break
		}

		args, err := ec.field_Query_paginate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Paginate(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["subSorts"].([]*model.SubSort), args["subFilters"].([]*model.SubFilter), args["page"].(int), args["size"].(int)), true

	case "Query.sub_news_social_typies":
		if e.complexity.Query.SubNewsSocialTypies == nil {
			break
		}

		args, err := ec.field_Query_sub_news_social_typies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubNewsSocialTypies(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.sub_oron_nutag_gamshig_ersdel":
		if e.complexity.Query.SubOronNutagGamshigErsdel == nil {
			break
		}

		args, err := ec.field_Query_sub_oron_nutag_gamshig_ersdel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubOronNutagGamshigErsdel(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.sub_oron_nutag_togtool":
		if e.complexity.Query.SubOronNutagTogtool == nil {
			break
		}

		args, err := ec.field_Query_sub_oron_nutag_togtool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubOronNutagTogtool(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.sub_oron_nutag_ua_heregjilt":
		if e.complexity.Query.SubOronNutagUaHeregjilt == nil {
			break
		}

		args, err := ec.field_Query_sub_oron_nutag_ua_heregjilt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubOronNutagUaHeregjilt(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.sub_oron_nutag_ua_tolvolgoo":
		if e.complexity.Query.SubOronNutagUaTolvolgoo == nil {
			break
		}

		args, err := ec.field_Query_sub_oron_nutag_ua_tolvolgoo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubOronNutagUaTolvolgoo(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.sub_undes_zovlol_gamshig_ersdel_buuruulah":
		if e.complexity.Query.SubUndesZovlolGamshigErsdelBuuruulah == nil {
			break
		}

		args, err := ec.field_Query_sub_undes_zovlol_gamshig_ersdel_buuruulah_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubUndesZovlolGamshigErsdelBuuruulah(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.sub_undes_zovlol_huraldaan":
		if e.complexity.Query.SubUndesZovlolHuraldaan == nil {
			break
		}

		args, err := ec.field_Query_sub_undes_zovlol_huraldaan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubUndesZovlolHuraldaan(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.view_ez_bodlogiin_bb":
		if e.complexity.Query.ViewEzBodlogiinBb == nil {
			break
		}

		args, err := ec.field_Query_view_ez_bodlogiin_bb_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViewEzBodlogiinBb(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.view_news":
		if e.complexity.Query.ViewNews == nil {
			break
		}

		args, err := ec.field_Query_view_news_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViewNews(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["subSorts"].([]*model.SubSort), args["subFilters"].([]*model.SubFilter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.view_oron_nutag_zovlol":
		if e.complexity.Query.ViewOronNutagZovlol == nil {
			break
		}

		args, err := ec.field_Query_view_oron_nutag_zovlol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViewOronNutagZovlol(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["subSorts"].([]*model.SubSort), args["subFilters"].([]*model.SubFilter), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.view_undesnii_zovlol":
		if e.complexity.Query.ViewUndesniiZovlol == nil {
			break
		}

		args, err := ec.field_Query_view_undesnii_zovlol_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ViewUndesniiZovlol(childComplexity, args["sorts"].([]*model.Sort), args["groupFilters"].([]*model.GroupFilter), args["filters"].([]*model.Filter), args["subSorts"].([]*model.SubSort), args["subFilters"].([]*model.SubFilter), args["limit"].(*int), args["offset"].(*int)), true

	case "SubNewsSocialTypies.id":
		if e.complexity.SubNewsSocialTypies.ID == nil {
			break
		}

		return e.complexity.SubNewsSocialTypies.ID(childComplexity), true

	case "SubNewsSocialTypies.news_id":
		if e.complexity.SubNewsSocialTypies.NewsID == nil {
			break
		}

		return e.complexity.SubNewsSocialTypies.NewsID(childComplexity), true

	case "SubNewsSocialTypies.social_type_id":
		if e.complexity.SubNewsSocialTypies.SocialTypeID == nil {
			break
		}

		return e.complexity.SubNewsSocialTypies.SocialTypeID(childComplexity), true

	case "SubOronNutagGamshigErsdel.id":
		if e.complexity.SubOronNutagGamshigErsdel.ID == nil {
			break
		}

		return e.complexity.SubOronNutagGamshigErsdel.ID(childComplexity), true

	case "SubOronNutagGamshigErsdel.o_zovlol_id":
		if e.complexity.SubOronNutagGamshigErsdel.OZovlolID == nil {
			break
		}

		return e.complexity.SubOronNutagGamshigErsdel.OZovlolID(childComplexity), true

	case "SubOronNutagGamshigErsdel.ognoo":
		if e.complexity.SubOronNutagGamshigErsdel.Ognoo == nil {
			break
		}

		return e.complexity.SubOronNutagGamshigErsdel.Ognoo(childComplexity), true

	case "SubOronNutagGamshigErsdel.tosov":
		if e.complexity.SubOronNutagGamshigErsdel.Tosov == nil {
			break
		}

		return e.complexity.SubOronNutagGamshigErsdel.Tosov(childComplexity), true

	case "SubOronNutagTogtool.id":
		if e.complexity.SubOronNutagTogtool.ID == nil {
			break
		}

		return e.complexity.SubOronNutagTogtool.ID(childComplexity), true

	case "SubOronNutagTogtool.o_zovlol_id":
		if e.complexity.SubOronNutagTogtool.OZovlolID == nil {
			break
		}

		return e.complexity.SubOronNutagTogtool.OZovlolID(childComplexity), true

	case "SubOronNutagTogtool.tailbar_en":
		if e.complexity.SubOronNutagTogtool.TailbarEn == nil {
			break
		}

		return e.complexity.SubOronNutagTogtool.TailbarEn(childComplexity), true

	case "SubOronNutagTogtool.tailbar_mn":
		if e.complexity.SubOronNutagTogtool.TailbarMn == nil {
			break
		}

		return e.complexity.SubOronNutagTogtool.TailbarMn(childComplexity), true

	case "SubOronNutagTogtool.togtool":
		if e.complexity.SubOronNutagTogtool.Togtool == nil {
			break
		}

		return e.complexity.SubOronNutagTogtool.Togtool(childComplexity), true

	case "SubOronNutagUaHeregjilt.huvi_mn":
		if e.complexity.SubOronNutagUaHeregjilt.HuviMn == nil {
			break
		}

		return e.complexity.SubOronNutagUaHeregjilt.HuviMn(childComplexity), true

	case "SubOronNutagUaHeregjilt.id":
		if e.complexity.SubOronNutagUaHeregjilt.ID == nil {
			break
		}

		return e.complexity.SubOronNutagUaHeregjilt.ID(childComplexity), true

	case "SubOronNutagUaHeregjilt.o_zovlol_id":
		if e.complexity.SubOronNutagUaHeregjilt.OZovlolID == nil {
			break
		}

		return e.complexity.SubOronNutagUaHeregjilt.OZovlolID(childComplexity), true

	case "SubOronNutagUaHeregjilt.tailbar":
		if e.complexity.SubOronNutagUaHeregjilt.Tailbar == nil {
			break
		}

		return e.complexity.SubOronNutagUaHeregjilt.Tailbar(childComplexity), true

	case "SubOronNutagUaHeregjilt.tailbar_en":
		if e.complexity.SubOronNutagUaHeregjilt.TailbarEn == nil {
			break
		}

		return e.complexity.SubOronNutagUaHeregjilt.TailbarEn(childComplexity), true

	case "SubOronNutagUaTolvolgoo.id":
		if e.complexity.SubOronNutagUaTolvolgoo.ID == nil {
			break
		}

		return e.complexity.SubOronNutagUaTolvolgoo.ID(childComplexity), true

	case "SubOronNutagUaTolvolgoo.o_zovlol_id":
		if e.complexity.SubOronNutagUaTolvolgoo.OZovlolID == nil {
			break
		}

		return e.complexity.SubOronNutagUaTolvolgoo.OZovlolID(childComplexity), true

	case "SubOronNutagUaTolvolgoo.tailbar_en":
		if e.complexity.SubOronNutagUaTolvolgoo.TailbarEn == nil {
			break
		}

		return e.complexity.SubOronNutagUaTolvolgoo.TailbarEn(childComplexity), true

	case "SubOronNutagUaTolvolgoo.tailbar_mn":
		if e.complexity.SubOronNutagUaTolvolgoo.TailbarMn == nil {
			break
		}

		return e.complexity.SubOronNutagUaTolvolgoo.TailbarMn(childComplexity), true

	case "SubOronNutagUaTolvolgoo.tolvolgoo":
		if e.complexity.SubOronNutagUaTolvolgoo.Tolvolgoo == nil {
			break
		}

		return e.complexity.SubOronNutagUaTolvolgoo.Tolvolgoo(childComplexity), true

	case "SubUndesZovlolGamshigErsdelBuuruulah.id":
		if e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.ID == nil {
			break
		}

		return e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.ID(childComplexity), true

	case "SubUndesZovlolGamshigErsdelBuuruulah.tailbar_en":
		if e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.TailbarEn == nil {
			break
		}

		return e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.TailbarEn(childComplexity), true

	case "SubUndesZovlolGamshigErsdelBuuruulah.tailbar_mn":
		if e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.TailbarMn == nil {
			break
		}

		return e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.TailbarMn(childComplexity), true

	case "SubUndesZovlolGamshigErsdelBuuruulah.togtool_file":
		if e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.TogtoolFile == nil {
			break
		}

		return e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.TogtoolFile(childComplexity), true

	case "SubUndesZovlolGamshigErsdelBuuruulah.undes_zovlol_id":
		if e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.UndesZovlolID == nil {
			break
		}

		return e.complexity.SubUndesZovlolGamshigErsdelBuuruulah.UndesZovlolID(childComplexity), true

	case "SubUndesZovlolHuraldaan.huraldaan":
		if e.complexity.SubUndesZovlolHuraldaan.Huraldaan == nil {
			break
		}

		return e.complexity.SubUndesZovlolHuraldaan.Huraldaan(childComplexity), true

	case "SubUndesZovlolHuraldaan.huraldaan_en":
		if e.complexity.SubUndesZovlolHuraldaan.HuraldaanEn == nil {
			break
		}

		return e.complexity.SubUndesZovlolHuraldaan.HuraldaanEn(childComplexity), true

	case "SubUndesZovlolHuraldaan.id":
		if e.complexity.SubUndesZovlolHuraldaan.ID == nil {
			break
		}

		return e.complexity.SubUndesZovlolHuraldaan.ID(childComplexity), true

	case "SubUndesZovlolHuraldaan.undes_zovlol_id":
		if e.complexity.SubUndesZovlolHuraldaan.UndesZovlolID == nil {
			break
		}

		return e.complexity.SubUndesZovlolHuraldaan.UndesZovlolID(childComplexity), true

	case "SubUndesZovlolHuraldaan.zovlomj":
		if e.complexity.SubUndesZovlolHuraldaan.Zovlomj == nil {
			break
		}

		return e.complexity.SubUndesZovlolHuraldaan.Zovlomj(childComplexity), true

	case "ViewEzBodlogiinBb.barimt_ner_en":
		if e.complexity.ViewEzBodlogiinBb.BarimtNerEn == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.BarimtNerEn(childComplexity), true

	case "ViewEzBodlogiinBb.created_at":
		if e.complexity.ViewEzBodlogiinBb.CreatedAt == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.CreatedAt(childComplexity), true

	case "ViewEzBodlogiinBb.deleted_at":
		if e.complexity.ViewEzBodlogiinBb.DeletedAt == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.DeletedAt(childComplexity), true

	case "ViewEzBodlogiinBb.document_sorting":
		if e.complexity.ViewEzBodlogiinBb.DocumentSorting == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.DocumentSorting(childComplexity), true

	case "ViewEzBodlogiinBb.document_sorting_en":
		if e.complexity.ViewEzBodlogiinBb.DocumentSortingEn == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.DocumentSortingEn(childComplexity), true

	case "ViewEzBodlogiinBb.document_sorting_id":
		if e.complexity.ViewEzBodlogiinBb.DocumentSortingID == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.DocumentSortingID(childComplexity), true

	case "ViewEzBodlogiinBb.ez_barimt_bichgiin_ner":
		if e.complexity.ViewEzBodlogiinBb.EzBarimtBichgiinNer == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.EzBarimtBichgiinNer(childComplexity), true

	case "ViewEzBodlogiinBb.file_en":
		if e.complexity.ViewEzBodlogiinBb.FileEn == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.FileEn(childComplexity), true

	case "ViewEzBodlogiinBb.hawsralt":
		if e.complexity.ViewEzBodlogiinBb.Hawsralt == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.Hawsralt(childComplexity), true

	case "ViewEzBodlogiinBb.id":
		if e.complexity.ViewEzBodlogiinBb.ID == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.ID(childComplexity), true

	case "ViewEzBodlogiinBb.sub_document_sorting_id":
		if e.complexity.ViewEzBodlogiinBb.SubDocumentSortingID == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.SubDocumentSortingID(childComplexity), true

	case "ViewEzBodlogiinBb.updated_at":
		if e.complexity.ViewEzBodlogiinBb.UpdatedAt == nil {
			break
		}

		return e.complexity.ViewEzBodlogiinBb.UpdatedAt(childComplexity), true

	case "ViewNews.created_at":
		if e.complexity.ViewNews.CreatedAt == nil {
			break
		}

		return e.complexity.ViewNews.CreatedAt(childComplexity), true

	case "ViewNews.deleted_at":
		if e.complexity.ViewNews.DeletedAt == nil {
			break
		}

		return e.complexity.ViewNews.DeletedAt(childComplexity), true

	case "ViewNews.delgerengui":
		if e.complexity.ViewNews.Delgerengui == nil {
			break
		}

		return e.complexity.ViewNews.Delgerengui(childComplexity), true

	case "ViewNews.garchig":
		if e.complexity.ViewNews.Garchig == nil {
			break
		}

		return e.complexity.ViewNews.Garchig(childComplexity), true

	case "ViewNews.handalt":
		if e.complexity.ViewNews.Handalt == nil {
			break
		}

		return e.complexity.ViewNews.Handalt(childComplexity), true

	case "ViewNews.id":
		if e.complexity.ViewNews.ID == nil {
			break
		}

		return e.complexity.ViewNews.ID(childComplexity), true

	case "ViewNews.logo":
		if e.complexity.ViewNews.Logo == nil {
			break
		}

		return e.complexity.ViewNews.Logo(childComplexity), true

	case "ViewNews.news_type":
		if e.complexity.ViewNews.NewsType == nil {
			break
		}

		return e.complexity.ViewNews.NewsType(childComplexity), true

	case "ViewNews.news_type_id":
		if e.complexity.ViewNews.NewsTypeID == nil {
			break
		}

		return e.complexity.ViewNews.NewsTypeID(childComplexity), true

	case "ViewNews.share":
		if e.complexity.ViewNews.Share == nil {
			break
		}

		return e.complexity.ViewNews.Share(childComplexity), true

	case "ViewNews.sub_news_social_typies":
		if e.complexity.ViewNews.SubNewsSocialTypies == nil {
			break
		}

		return e.complexity.ViewNews.SubNewsSocialTypies(childComplexity), true

	case "ViewNews.updated_at":
		if e.complexity.ViewNews.UpdatedAt == nil {
			break
		}

		return e.complexity.ViewNews.UpdatedAt(childComplexity), true

	case "ViewNews.ursah_eseh":
		if e.complexity.ViewNews.UrsahEseh == nil {
			break
		}

		return e.complexity.ViewNews.UrsahEseh(childComplexity), true

	case "ViewNews.zurag":
		if e.complexity.ViewNews.Zurag == nil {
			break
		}

		return e.complexity.ViewNews.Zurag(childComplexity), true

	case "ViewOronNutagZovlol.aimag_id":
		if e.complexity.ViewOronNutagZovlol.AimagID == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.AimagID(childComplexity), true

	case "ViewOronNutagZovlol.aimagname":
		if e.complexity.ViewOronNutagZovlol.Aimagname == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.Aimagname(childComplexity), true

	case "ViewOronNutagZovlol.created_at":
		if e.complexity.ViewOronNutagZovlol.CreatedAt == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.CreatedAt(childComplexity), true

	case "ViewOronNutagZovlol.deleted_at":
		if e.complexity.ViewOronNutagZovlol.DeletedAt == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.DeletedAt(childComplexity), true

	case "ViewOronNutagZovlol.id":
		if e.complexity.ViewOronNutagZovlol.ID == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.ID(childComplexity), true

	case "ViewOronNutagZovlol.sub_oron_nutag_gamshig_ersdel":
		if e.complexity.ViewOronNutagZovlol.SubOronNutagGamshigErsdel == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.SubOronNutagGamshigErsdel(childComplexity), true

	case "ViewOronNutagZovlol.sub_oron_nutag_togtool":
		if e.complexity.ViewOronNutagZovlol.SubOronNutagTogtool == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.SubOronNutagTogtool(childComplexity), true

	case "ViewOronNutagZovlol.sub_oron_nutag_ua_heregjilt":
		if e.complexity.ViewOronNutagZovlol.SubOronNutagUaHeregjilt == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.SubOronNutagUaHeregjilt(childComplexity), true

	case "ViewOronNutagZovlol.sub_oron_nutag_ua_tolvolgoo":
		if e.complexity.ViewOronNutagZovlol.SubOronNutagUaTolvolgoo == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.SubOronNutagUaTolvolgoo(childComplexity), true

	case "ViewOronNutagZovlol.sum_id":
		if e.complexity.ViewOronNutagZovlol.SumID == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.SumID(childComplexity), true

	case "ViewOronNutagZovlol.sumname":
		if e.complexity.ViewOronNutagZovlol.Sumname == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.Sumname(childComplexity), true

	case "ViewOronNutagZovlol.updated_at":
		if e.complexity.ViewOronNutagZovlol.UpdatedAt == nil {
			break
		}

		return e.complexity.ViewOronNutagZovlol.UpdatedAt(childComplexity), true

	case "ViewUndesniiZovlol.created_at":
		if e.complexity.ViewUndesniiZovlol.CreatedAt == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.CreatedAt(childComplexity), true

	case "ViewUndesniiZovlol.deleted_at":
		if e.complexity.ViewUndesniiZovlol.DeletedAt == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.DeletedAt(childComplexity), true

	case "ViewUndesniiZovlol.huraldaan":
		if e.complexity.ViewUndesniiZovlol.Huraldaan == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.Huraldaan(childComplexity), true

	case "ViewUndesniiZovlol.id":
		if e.complexity.ViewUndesniiZovlol.ID == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.ID(childComplexity), true

	case "ViewUndesniiZovlol.sub_undes_zovlol_gamshig_ersdel_buuruulah":
		if e.complexity.ViewUndesniiZovlol.SubUndesZovlolGamshigErsdelBuuruulah == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.SubUndesZovlolGamshigErsdelBuuruulah(childComplexity), true

	case "ViewUndesniiZovlol.sub_undes_zovlol_huraldaan":
		if e.complexity.ViewUndesniiZovlol.SubUndesZovlolHuraldaan == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.SubUndesZovlolHuraldaan(childComplexity), true

	case "ViewUndesniiZovlol.tailbar_mn_bureldehuun":
		if e.complexity.ViewUndesniiZovlol.TailbarMnBureldehuun == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.TailbarMnBureldehuun(childComplexity), true

	case "ViewUndesniiZovlol.updated_at":
		if e.complexity.ViewUndesniiZovlol.UpdatedAt == nil {
			break
		}

		return e.complexity.ViewUndesniiZovlol.UpdatedAt(childComplexity), true

	case "deleted.id":
		if e.complexity.Deleted.ID == nil {
			break
		}

		return e.complexity.Deleted.ID(childComplexity), true

	case "paginate.hamtragch_baiguullaga":
		if e.complexity.Paginate.HamtragchBaiguullaga == nil {
			break
		}

		return e.complexity.Paginate.HamtragchBaiguullaga(childComplexity), true

	case "paginate.last_page":
		if e.complexity.Paginate.LastPage == nil {
			break
		}

		return e.complexity.Paginate.LastPage(childComplexity), true

	case "paginate.lut_angi":
		if e.complexity.Paginate.LutAngi == nil {
			break
		}

		return e.complexity.Paginate.LutAngi(childComplexity), true

	case "paginate.lut_document_sorting":
		if e.complexity.Paginate.LutDocumentSorting == nil {
			break
		}

		return e.complexity.Paginate.LutDocumentSorting(childComplexity), true

	case "paginate.lut_news_type":
		if e.complexity.Paginate.LutNewsType == nil {
			break
		}

		return e.complexity.Paginate.LutNewsType(childComplexity), true

	case "paginate.page":
		if e.complexity.Paginate.Page == nil {
			break
		}

		return e.complexity.Paginate.Page(childComplexity), true

	case "paginate.sub_news_social_typies":
		if e.complexity.Paginate.SubNewsSocialTypies == nil {
			break
		}

		return e.complexity.Paginate.SubNewsSocialTypies(childComplexity), true

	case "paginate.sub_oron_nutag_gamshig_ersdel":
		if e.complexity.Paginate.SubOronNutagGamshigErsdel == nil {
			break
		}

		return e.complexity.Paginate.SubOronNutagGamshigErsdel(childComplexity), true

	case "paginate.sub_oron_nutag_togtool":
		if e.complexity.Paginate.SubOronNutagTogtool == nil {
			break
		}

		return e.complexity.Paginate.SubOronNutagTogtool(childComplexity), true

	case "paginate.sub_oron_nutag_ua_heregjilt":
		if e.complexity.Paginate.SubOronNutagUaHeregjilt == nil {
			break
		}

		return e.complexity.Paginate.SubOronNutagUaHeregjilt(childComplexity), true

	case "paginate.sub_oron_nutag_ua_tolvolgoo":
		if e.complexity.Paginate.SubOronNutagUaTolvolgoo == nil {
			break
		}

		return e.complexity.Paginate.SubOronNutagUaTolvolgoo(childComplexity), true

	case "paginate.sub_undes_zovlol_gamshig_ersdel_buuruulah":
		if e.complexity.Paginate.SubUndesZovlolGamshigErsdelBuuruulah == nil {
			break
		}

		return e.complexity.Paginate.SubUndesZovlolGamshigErsdelBuuruulah(childComplexity), true

	case "paginate.sub_undes_zovlol_huraldaan":
		if e.complexity.Paginate.SubUndesZovlolHuraldaan == nil {
			break
		}

		return e.complexity.Paginate.SubUndesZovlolHuraldaan(childComplexity), true

	case "paginate.total":
		if e.complexity.Paginate.Total == nil {
			break
		}

		return e.complexity.Paginate.Total(childComplexity), true

	case "paginate.view_ez_bodlogiin_bb":
		if e.complexity.Paginate.ViewEzBodlogiinBb == nil {
			break
		}

		return e.complexity.Paginate.ViewEzBodlogiinBb(childComplexity), true

	case "paginate.view_news":
		if e.complexity.Paginate.ViewNews == nil {
			break
		}

		return e.complexity.Paginate.ViewNews(childComplexity), true

	case "paginate.view_oron_nutag_zovlol":
		if e.complexity.Paginate.ViewOronNutagZovlol == nil {
			break
		}

		return e.complexity.Paginate.ViewOronNutagZovlol(childComplexity), true

	case "paginate.view_undesnii_zovlol":
		if e.complexity.Paginate.ViewUndesniiZovlol == nil {
			break
		}

		return e.complexity.Paginate.ViewUndesniiZovlol(childComplexity), true

	case "subTable.ConnectionField":
		if e.complexity.SubTable.ConnectionField == nil {
			break
		}

		return e.complexity.SubTable.ConnectionField(childComplexity), true

	case "subTable.parentIdentity":
		if e.complexity.SubTable.ParentIdentity == nil {
			break
		}

		return e.complexity.SubTable.ParentIdentity(childComplexity), true

	case "subTable.table":
		if e.complexity.SubTable.Table == nil {
			break
		}

		return e.complexity.SubTable.Table(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputfilter,
		ec.unmarshalInputgroupFilter,
		ec.unmarshalInputsort,
		ec.unmarshalInputsubFilter,
		ec.unmarshalInputsubSort,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "lambda/graph/schemas-common/filter.graphql", Input: `input filter {
    column: String!
    condition:condition!
    value: String!
}
input groupFilter {
    filters:[filter]!
    combine: combine!
}
enum combine{
    or
    and
}
input subFilter {
    column: String!
    table: String!
    condition:condition!
    value: String!
}
enum condition{
    equals
    notEqual
    contains
    notContains
    startsWith
    endsWith
    greaterThan
    greaterThanOrEqual
    lessThan
    lessThanOrEqual
    isNull
    notNull
    whereIn
}

`, BuiltIn: false},
	{Name: "lambda/graph/schemas-common/mutation.graphql", Input: `type deleted {
    id:String!
}`, BuiltIn: false},
	{Name: "lambda/graph/schemas-common/scalar.graphql", Input: `scalar Time
scalar Date`, BuiltIn: false},
	{Name: "lambda/graph/schemas-common/sort.graphql", Input: `input sort {
    column: String!
    order:order!
}
input subSort {
    column: String!
    table:String!
    order:order!

}
enum order{
    asc
    desc
}`, BuiltIn: false},
	{Name: "lambda/graph/schemas-common/sub.graphql", Input: `type subTable {
    table: String!
    parentIdentity:String!
    ConnectionField:String!
}`, BuiltIn: false},
	{Name: "lambda/graph/schemas/HamtragchBaiguullaga.graphql", Input: `type HamtragchBaiguullaga  {
    b_ner: String
    created_at: Time
    deleted_at: Time
    id: ID!
    link: String
    logo: String
    updated_at: Time   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/LutAngi.graphql", Input: `type LutAngi  {
    angi: String
    id: ID!   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/LutDocumentSorting.graphql", Input: `type LutDocumentSorting  {
    document_sorting: String
    document_sorting_en: String
    id: ID!   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/LutNewsType.graphql", Input: `type LutNewsType  {
    id: ID!
    news_type: String   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/SubNewsSocialTypies.graphql", Input: `type SubNewsSocialTypies  {
    id: ID!
    news_id: Int
    social_type_id: Int   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/SubOronNutagGamshigErsdel.graphql", Input: `type SubOronNutagGamshigErsdel  {
    id: ID!
    o_zovlol_id: Int
    ognoo: Date
    tosov: String   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/SubOronNutagTogtool.graphql", Input: `type SubOronNutagTogtool  {
    id: ID!
    o_zovlol_id: Int
    tailbar_en: String
    tailbar_mn: String
    togtool: String   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/SubOronNutagUaHeregjilt.graphql", Input: `type SubOronNutagUaHeregjilt  {
    huvi_mn: Int
    id: ID!
    o_zovlol_id: Int
    tailbar: String
    tailbar_en: String   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/SubOronNutagUaTolvolgoo.graphql", Input: `type SubOronNutagUaTolvolgoo  {
    id: ID!
    o_zovlol_id: Int
    tailbar_en: String
    tailbar_mn: String
    tolvolgoo: String   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/SubUndesZovlolGamshigErsdelBuuruulah.graphql", Input: `type SubUndesZovlolGamshigErsdelBuuruulah  {
    id: ID!
    tailbar_en: String
    tailbar_mn: String
    togtool_file: String
    undes_zovlol_id: Int   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/SubUndesZovlolHuraldaan.graphql", Input: `type SubUndesZovlolHuraldaan  {
    huraldaan: String
    huraldaan_en: String
    id: ID!
    undes_zovlol_id: Int
    zovlomj: String   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/ViewEzBodlogiinBb.graphql", Input: `type ViewEzBodlogiinBb  {
    barimt_ner_en: String
    created_at: Time
    deleted_at: Time
    document_sorting: String
    document_sorting_en: String
    document_sorting_id: Int
    ez_barimt_bichgiin_ner: String
    file_en: String
    hawsralt: String
    id: Int
    sub_document_sorting_id: Int
    updated_at: Time   
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/ViewNews.graphql", Input: `type ViewNews  {
    created_at: Time
    deleted_at: Time
    delgerengui: String
    garchig: String
    handalt: Int
    id: Int
    logo: String
    news_type: String
    news_type_id: Int
    share: Int
    updated_at: Time
    ursah_eseh: Int
    zurag: String  
    sub_news_social_typies:[SubNewsSocialTypies!] 
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/ViewOronNutagZovlol.graphql", Input: `type ViewOronNutagZovlol  {
    aimag_id: Int
    aimagname: String
    created_at: Time
    deleted_at: Time
    id: Int
    sum_id: Int
    sumname: String
    updated_at: Time  
    sub_oron_nutag_gamshig_ersdel:[SubOronNutagGamshigErsdel!]
    sub_oron_nutag_togtool:[SubOronNutagTogtool!]
    sub_oron_nutag_ua_heregjilt:[SubOronNutagUaHeregjilt!]
    sub_oron_nutag_ua_tolvolgoo:[SubOronNutagUaTolvolgoo!] 
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/ViewUndesniiZovlol.graphql", Input: `type ViewUndesniiZovlol  {
    created_at: Time
    deleted_at: Time
    huraldaan: String
    id: Int
    tailbar_mn_bureldehuun: String
    updated_at: Time  
    sub_undes_zovlol_gamshig_ersdel_buuruulah:[SubUndesZovlolGamshigErsdelBuuruulah!]
    sub_undes_zovlol_huraldaan:[SubUndesZovlolHuraldaan!] 
} `, BuiltIn: false},
	{Name: "lambda/graph/schemas/schemas.graphql", Input: `type Query {
    lut_document_sorting(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [LutDocumentSorting!]
    view_ez_bodlogiin_bb(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [ViewEzBodlogiinBb!]
    hamtragch_baiguullaga(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [HamtragchBaiguullaga!]
    sub_oron_nutag_gamshig_ersdel(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [SubOronNutagGamshigErsdel!]
    sub_oron_nutag_togtool(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [SubOronNutagTogtool!]
    sub_oron_nutag_ua_heregjilt(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [SubOronNutagUaHeregjilt!]
    sub_oron_nutag_ua_tolvolgoo(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [SubOronNutagUaTolvolgoo!]
    view_oron_nutag_zovlol(sorts:[sort], groupFilters:[groupFilter], filters:[filter], subSorts:[subSort], subFilters:[subFilter], limit: Int, offset: Int): [ViewOronNutagZovlol!]
    sub_undes_zovlol_huraldaan(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [SubUndesZovlolHuraldaan!]
    sub_undes_zovlol_gamshig_ersdel_buuruulah(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [SubUndesZovlolGamshigErsdelBuuruulah!]
    view_undesnii_zovlol(sorts:[sort], groupFilters:[groupFilter], filters:[filter], subSorts:[subSort], subFilters:[subFilter], limit: Int, offset: Int): [ViewUndesniiZovlol!]
    lut_angi(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [LutAngi!]
    sub_news_social_typies(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [SubNewsSocialTypies!]
    view_news(sorts:[sort], groupFilters:[groupFilter], filters:[filter], subSorts:[subSort], subFilters:[subFilter], limit: Int, offset: Int): [ViewNews!]
    lut_news_type(sorts:[sort], groupFilters:[groupFilter], filters:[filter], limit: Int, offset: Int): [LutNewsType!]
    paginate(sorts: [sort], groupFilters:[groupFilter], filters:[filter], subSorts:[subSort], subFilters:[subFilter], page:Int!, size:Int!): paginate!
}

type paginate  {
    page: Int!
    total: Int!
    last_page: Int!
    lut_document_sorting:[LutDocumentSorting!]
    view_ez_bodlogiin_bb:[ViewEzBodlogiinBb!]
    hamtragch_baiguullaga:[HamtragchBaiguullaga!]
    sub_oron_nutag_gamshig_ersdel:[SubOronNutagGamshigErsdel!]
    sub_oron_nutag_togtool:[SubOronNutagTogtool!]
    sub_oron_nutag_ua_heregjilt:[SubOronNutagUaHeregjilt!]
    sub_oron_nutag_ua_tolvolgoo:[SubOronNutagUaTolvolgoo!]
    view_oron_nutag_zovlol:[ViewOronNutagZovlol!]
    sub_undes_zovlol_huraldaan:[SubUndesZovlolHuraldaan!]
    sub_undes_zovlol_gamshig_ersdel_buuruulah:[SubUndesZovlolGamshigErsdelBuuruulah!]
    view_undesnii_zovlol:[ViewUndesniiZovlol!]
    lut_angi:[LutAngi!]
    sub_news_social_typies:[SubNewsSocialTypies!]
    view_news:[ViewNews!]
    lut_news_type:[LutNewsType!]
}


`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_hamtragch_baiguullaga_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_lut_angi_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_lut_document_sorting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_lut_news_type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_paginate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 []*model.SubSort
	if tmp, ok := rawArgs["subSorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subSorts"))
		arg3, err = ec.unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subSorts"] = arg3
	var arg4 []*model.SubFilter
	if tmp, ok := rawArgs["subFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subFilters"))
		arg4, err = ec.unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subFilters"] = arg4
	var arg5 int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg5, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg5
	var arg6 int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
		arg6, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_sub_news_social_typies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sub_oron_nutag_gamshig_ersdel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sub_oron_nutag_togtool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sub_oron_nutag_ua_heregjilt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sub_oron_nutag_ua_tolvolgoo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sub_undes_zovlol_gamshig_ersdel_buuruulah_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sub_undes_zovlol_huraldaan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_view_ez_bodlogiin_bb_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_view_news_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 []*model.SubSort
	if tmp, ok := rawArgs["subSorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subSorts"))
		arg3, err = ec.unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subSorts"] = arg3
	var arg4 []*model.SubFilter
	if tmp, ok := rawArgs["subFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subFilters"))
		arg4, err = ec.unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subFilters"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg5
	var arg6 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg6, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_view_oron_nutag_zovlol_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 []*model.SubSort
	if tmp, ok := rawArgs["subSorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subSorts"))
		arg3, err = ec.unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subSorts"] = arg3
	var arg4 []*model.SubFilter
	if tmp, ok := rawArgs["subFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subFilters"))
		arg4, err = ec.unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subFilters"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg5
	var arg6 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg6, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_view_undesnii_zovlol_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 []*model.SubSort
	if tmp, ok := rawArgs["subSorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subSorts"))
		arg3, err = ec.unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subSorts"] = arg3
	var arg4 []*model.SubFilter
	if tmp, ok := rawArgs["subFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subFilters"))
		arg4, err = ec.unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subFilters"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg5
	var arg6 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg6, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg6
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _HamtragchBaiguullaga_b_ner(ctx context.Context, field graphql.CollectedField, obj *models.HamtragchBaiguullaga) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HamtragchBaiguullaga_b_ner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BNer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HamtragchBaiguullaga_b_ner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HamtragchBaiguullaga",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HamtragchBaiguullaga_created_at(ctx context.Context, field graphql.CollectedField, obj *models.HamtragchBaiguullaga) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HamtragchBaiguullaga_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HamtragchBaiguullaga_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HamtragchBaiguullaga",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HamtragchBaiguullaga_deleted_at(ctx context.Context, field graphql.CollectedField, obj *models.HamtragchBaiguullaga) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HamtragchBaiguullaga_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HamtragchBaiguullaga_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HamtragchBaiguullaga",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HamtragchBaiguullaga_id(ctx context.Context, field graphql.CollectedField, obj *models.HamtragchBaiguullaga) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HamtragchBaiguullaga_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HamtragchBaiguullaga_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HamtragchBaiguullaga",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HamtragchBaiguullaga_link(ctx context.Context, field graphql.CollectedField, obj *models.HamtragchBaiguullaga) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HamtragchBaiguullaga_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HamtragchBaiguullaga_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HamtragchBaiguullaga",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HamtragchBaiguullaga_logo(ctx context.Context, field graphql.CollectedField, obj *models.HamtragchBaiguullaga) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HamtragchBaiguullaga_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HamtragchBaiguullaga_logo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HamtragchBaiguullaga",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HamtragchBaiguullaga_updated_at(ctx context.Context, field graphql.CollectedField, obj *models.HamtragchBaiguullaga) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HamtragchBaiguullaga_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HamtragchBaiguullaga_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HamtragchBaiguullaga",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LutAngi_angi(ctx context.Context, field graphql.CollectedField, obj *models.LutAngi) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LutAngi_angi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Angi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LutAngi_angi(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LutAngi",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LutAngi_id(ctx context.Context, field graphql.CollectedField, obj *models.LutAngi) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LutAngi_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LutAngi_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LutAngi",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LutDocumentSorting_document_sorting(ctx context.Context, field graphql.CollectedField, obj *models.LutDocumentSorting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LutDocumentSorting_document_sorting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentSorting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LutDocumentSorting_document_sorting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LutDocumentSorting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LutDocumentSorting_document_sorting_en(ctx context.Context, field graphql.CollectedField, obj *models.LutDocumentSorting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LutDocumentSorting_document_sorting_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentSortingEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LutDocumentSorting_document_sorting_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LutDocumentSorting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LutDocumentSorting_id(ctx context.Context, field graphql.CollectedField, obj *models.LutDocumentSorting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LutDocumentSorting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LutDocumentSorting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LutDocumentSorting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LutNewsType_id(ctx context.Context, field graphql.CollectedField, obj *models.LutNewsType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LutNewsType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LutNewsType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LutNewsType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LutNewsType_news_type(ctx context.Context, field graphql.CollectedField, obj *models.LutNewsType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LutNewsType_news_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LutNewsType_news_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LutNewsType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_lut_document_sorting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_lut_document_sorting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LutDocumentSorting(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LutDocumentSorting)
	fc.Result = res
	return ec.marshalOLutDocumentSorting2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutDocumentSortingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_lut_document_sorting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "document_sorting":
				return ec.fieldContext_LutDocumentSorting_document_sorting(ctx, field)
			case "document_sorting_en":
				return ec.fieldContext_LutDocumentSorting_document_sorting_en(ctx, field)
			case "id":
				return ec.fieldContext_LutDocumentSorting_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LutDocumentSorting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lut_document_sorting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_view_ez_bodlogiin_bb(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_view_ez_bodlogiin_bb(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViewEzBodlogiinBb(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewEzBodlogiinBb)
	fc.Result = res
	return ec.marshalOViewEzBodlogiinBb2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewEzBodlogiinBbᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_view_ez_bodlogiin_bb(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "barimt_ner_en":
				return ec.fieldContext_ViewEzBodlogiinBb_barimt_ner_en(ctx, field)
			case "created_at":
				return ec.fieldContext_ViewEzBodlogiinBb_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewEzBodlogiinBb_deleted_at(ctx, field)
			case "document_sorting":
				return ec.fieldContext_ViewEzBodlogiinBb_document_sorting(ctx, field)
			case "document_sorting_en":
				return ec.fieldContext_ViewEzBodlogiinBb_document_sorting_en(ctx, field)
			case "document_sorting_id":
				return ec.fieldContext_ViewEzBodlogiinBb_document_sorting_id(ctx, field)
			case "ez_barimt_bichgiin_ner":
				return ec.fieldContext_ViewEzBodlogiinBb_ez_barimt_bichgiin_ner(ctx, field)
			case "file_en":
				return ec.fieldContext_ViewEzBodlogiinBb_file_en(ctx, field)
			case "hawsralt":
				return ec.fieldContext_ViewEzBodlogiinBb_hawsralt(ctx, field)
			case "id":
				return ec.fieldContext_ViewEzBodlogiinBb_id(ctx, field)
			case "sub_document_sorting_id":
				return ec.fieldContext_ViewEzBodlogiinBb_sub_document_sorting_id(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewEzBodlogiinBb_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewEzBodlogiinBb", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_view_ez_bodlogiin_bb_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_hamtragch_baiguullaga(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_hamtragch_baiguullaga(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().HamtragchBaiguullaga(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.HamtragchBaiguullaga)
	fc.Result = res
	return ec.marshalOHamtragchBaiguullaga2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐHamtragchBaiguullagaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_hamtragch_baiguullaga(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "b_ner":
				return ec.fieldContext_HamtragchBaiguullaga_b_ner(ctx, field)
			case "created_at":
				return ec.fieldContext_HamtragchBaiguullaga_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_HamtragchBaiguullaga_deleted_at(ctx, field)
			case "id":
				return ec.fieldContext_HamtragchBaiguullaga_id(ctx, field)
			case "link":
				return ec.fieldContext_HamtragchBaiguullaga_link(ctx, field)
			case "logo":
				return ec.fieldContext_HamtragchBaiguullaga_logo(ctx, field)
			case "updated_at":
				return ec.fieldContext_HamtragchBaiguullaga_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HamtragchBaiguullaga", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_hamtragch_baiguullaga_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sub_oron_nutag_gamshig_ersdel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sub_oron_nutag_gamshig_ersdel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubOronNutagGamshigErsdel(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagGamshigErsdel)
	fc.Result = res
	return ec.marshalOSubOronNutagGamshigErsdel2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagGamshigErsdelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sub_oron_nutag_gamshig_ersdel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagGamshigErsdel_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagGamshigErsdel_o_zovlol_id(ctx, field)
			case "ognoo":
				return ec.fieldContext_SubOronNutagGamshigErsdel_ognoo(ctx, field)
			case "tosov":
				return ec.fieldContext_SubOronNutagGamshigErsdel_tosov(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagGamshigErsdel", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sub_oron_nutag_gamshig_ersdel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sub_oron_nutag_togtool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sub_oron_nutag_togtool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubOronNutagTogtool(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagTogtool)
	fc.Result = res
	return ec.marshalOSubOronNutagTogtool2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagTogtoolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sub_oron_nutag_togtool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagTogtool_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagTogtool_o_zovlol_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagTogtool_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubOronNutagTogtool_tailbar_mn(ctx, field)
			case "togtool":
				return ec.fieldContext_SubOronNutagTogtool_togtool(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagTogtool", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sub_oron_nutag_togtool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sub_oron_nutag_ua_heregjilt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sub_oron_nutag_ua_heregjilt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubOronNutagUaHeregjilt(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagUaHeregjilt)
	fc.Result = res
	return ec.marshalOSubOronNutagUaHeregjilt2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaHeregjiltᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sub_oron_nutag_ua_heregjilt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "huvi_mn":
				return ec.fieldContext_SubOronNutagUaHeregjilt_huvi_mn(ctx, field)
			case "id":
				return ec.fieldContext_SubOronNutagUaHeregjilt_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagUaHeregjilt_o_zovlol_id(ctx, field)
			case "tailbar":
				return ec.fieldContext_SubOronNutagUaHeregjilt_tailbar(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagUaHeregjilt_tailbar_en(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagUaHeregjilt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sub_oron_nutag_ua_heregjilt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sub_oron_nutag_ua_tolvolgoo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sub_oron_nutag_ua_tolvolgoo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubOronNutagUaTolvolgoo(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagUaTolvolgoo)
	fc.Result = res
	return ec.marshalOSubOronNutagUaTolvolgoo2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaTolvolgooᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sub_oron_nutag_ua_tolvolgoo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_o_zovlol_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_mn(ctx, field)
			case "tolvolgoo":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tolvolgoo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagUaTolvolgoo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sub_oron_nutag_ua_tolvolgoo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_view_oron_nutag_zovlol(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_view_oron_nutag_zovlol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViewOronNutagZovlol(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["subSorts"].([]*model.SubSort), fc.Args["subFilters"].([]*model.SubFilter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewOronNutagZovlol)
	fc.Result = res
	return ec.marshalOViewOronNutagZovlol2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewOronNutagZovlolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_view_oron_nutag_zovlol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "aimag_id":
				return ec.fieldContext_ViewOronNutagZovlol_aimag_id(ctx, field)
			case "aimagname":
				return ec.fieldContext_ViewOronNutagZovlol_aimagname(ctx, field)
			case "created_at":
				return ec.fieldContext_ViewOronNutagZovlol_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewOronNutagZovlol_deleted_at(ctx, field)
			case "id":
				return ec.fieldContext_ViewOronNutagZovlol_id(ctx, field)
			case "sum_id":
				return ec.fieldContext_ViewOronNutagZovlol_sum_id(ctx, field)
			case "sumname":
				return ec.fieldContext_ViewOronNutagZovlol_sumname(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewOronNutagZovlol_updated_at(ctx, field)
			case "sub_oron_nutag_gamshig_ersdel":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_gamshig_ersdel(ctx, field)
			case "sub_oron_nutag_togtool":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_togtool(ctx, field)
			case "sub_oron_nutag_ua_heregjilt":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_heregjilt(ctx, field)
			case "sub_oron_nutag_ua_tolvolgoo":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_tolvolgoo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewOronNutagZovlol", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_view_oron_nutag_zovlol_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sub_undes_zovlol_huraldaan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sub_undes_zovlol_huraldaan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubUndesZovlolHuraldaan(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubUndesZovlolHuraldaan)
	fc.Result = res
	return ec.marshalOSubUndesZovlolHuraldaan2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolHuraldaanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sub_undes_zovlol_huraldaan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "huraldaan":
				return ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan(ctx, field)
			case "huraldaan_en":
				return ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan_en(ctx, field)
			case "id":
				return ec.fieldContext_SubUndesZovlolHuraldaan_id(ctx, field)
			case "undes_zovlol_id":
				return ec.fieldContext_SubUndesZovlolHuraldaan_undes_zovlol_id(ctx, field)
			case "zovlomj":
				return ec.fieldContext_SubUndesZovlolHuraldaan_zovlomj(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubUndesZovlolHuraldaan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sub_undes_zovlol_huraldaan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubUndesZovlolGamshigErsdelBuuruulah(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubUndesZovlolGamshigErsdelBuuruulah)
	fc.Result = res
	return ec.marshalOSubUndesZovlolGamshigErsdelBuuruulah2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolGamshigErsdelBuuruulahᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_mn(ctx, field)
			case "togtool_file":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_togtool_file(ctx, field)
			case "undes_zovlol_id":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_undes_zovlol_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubUndesZovlolGamshigErsdelBuuruulah", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sub_undes_zovlol_gamshig_ersdel_buuruulah_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_view_undesnii_zovlol(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_view_undesnii_zovlol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViewUndesniiZovlol(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["subSorts"].([]*model.SubSort), fc.Args["subFilters"].([]*model.SubFilter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewUndesniiZovlol)
	fc.Result = res
	return ec.marshalOViewUndesniiZovlol2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewUndesniiZovlolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_view_undesnii_zovlol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "created_at":
				return ec.fieldContext_ViewUndesniiZovlol_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewUndesniiZovlol_deleted_at(ctx, field)
			case "huraldaan":
				return ec.fieldContext_ViewUndesniiZovlol_huraldaan(ctx, field)
			case "id":
				return ec.fieldContext_ViewUndesniiZovlol_id(ctx, field)
			case "tailbar_mn_bureldehuun":
				return ec.fieldContext_ViewUndesniiZovlol_tailbar_mn_bureldehuun(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewUndesniiZovlol_updated_at(ctx, field)
			case "sub_undes_zovlol_gamshig_ersdel_buuruulah":
				return ec.fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field)
			case "sub_undes_zovlol_huraldaan":
				return ec.fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_huraldaan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewUndesniiZovlol", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_view_undesnii_zovlol_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_lut_angi(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_lut_angi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LutAngi(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LutAngi)
	fc.Result = res
	return ec.marshalOLutAngi2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutAngiᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_lut_angi(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "angi":
				return ec.fieldContext_LutAngi_angi(ctx, field)
			case "id":
				return ec.fieldContext_LutAngi_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LutAngi", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lut_angi_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sub_news_social_typies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sub_news_social_typies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubNewsSocialTypies(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubNewsSocialTypies)
	fc.Result = res
	return ec.marshalOSubNewsSocialTypies2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubNewsSocialTypiesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sub_news_social_typies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubNewsSocialTypies_id(ctx, field)
			case "news_id":
				return ec.fieldContext_SubNewsSocialTypies_news_id(ctx, field)
			case "social_type_id":
				return ec.fieldContext_SubNewsSocialTypies_social_type_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubNewsSocialTypies", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sub_news_social_typies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_view_news(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_view_news(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ViewNews(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["subSorts"].([]*model.SubSort), fc.Args["subFilters"].([]*model.SubFilter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewNews)
	fc.Result = res
	return ec.marshalOViewNews2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewNewsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_view_news(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "created_at":
				return ec.fieldContext_ViewNews_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewNews_deleted_at(ctx, field)
			case "delgerengui":
				return ec.fieldContext_ViewNews_delgerengui(ctx, field)
			case "garchig":
				return ec.fieldContext_ViewNews_garchig(ctx, field)
			case "handalt":
				return ec.fieldContext_ViewNews_handalt(ctx, field)
			case "id":
				return ec.fieldContext_ViewNews_id(ctx, field)
			case "logo":
				return ec.fieldContext_ViewNews_logo(ctx, field)
			case "news_type":
				return ec.fieldContext_ViewNews_news_type(ctx, field)
			case "news_type_id":
				return ec.fieldContext_ViewNews_news_type_id(ctx, field)
			case "share":
				return ec.fieldContext_ViewNews_share(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewNews_updated_at(ctx, field)
			case "ursah_eseh":
				return ec.fieldContext_ViewNews_ursah_eseh(ctx, field)
			case "zurag":
				return ec.fieldContext_ViewNews_zurag(ctx, field)
			case "sub_news_social_typies":
				return ec.fieldContext_ViewNews_sub_news_social_typies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewNews", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_view_news_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_lut_news_type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_lut_news_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LutNewsType(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LutNewsType)
	fc.Result = res
	return ec.marshalOLutNewsType2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutNewsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_lut_news_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LutNewsType_id(ctx, field)
			case "news_type":
				return ec.fieldContext_LutNewsType_news_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LutNewsType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lut_news_type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_paginate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_paginate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Paginate(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["subSorts"].([]*model.SubSort), fc.Args["subFilters"].([]*model.SubFilter), fc.Args["page"].(int), fc.Args["size"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Paginate)
	fc.Result = res
	return ec.marshalNpaginate2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐPaginate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_paginate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_paginate_page(ctx, field)
			case "total":
				return ec.fieldContext_paginate_total(ctx, field)
			case "last_page":
				return ec.fieldContext_paginate_last_page(ctx, field)
			case "lut_document_sorting":
				return ec.fieldContext_paginate_lut_document_sorting(ctx, field)
			case "view_ez_bodlogiin_bb":
				return ec.fieldContext_paginate_view_ez_bodlogiin_bb(ctx, field)
			case "hamtragch_baiguullaga":
				return ec.fieldContext_paginate_hamtragch_baiguullaga(ctx, field)
			case "sub_oron_nutag_gamshig_ersdel":
				return ec.fieldContext_paginate_sub_oron_nutag_gamshig_ersdel(ctx, field)
			case "sub_oron_nutag_togtool":
				return ec.fieldContext_paginate_sub_oron_nutag_togtool(ctx, field)
			case "sub_oron_nutag_ua_heregjilt":
				return ec.fieldContext_paginate_sub_oron_nutag_ua_heregjilt(ctx, field)
			case "sub_oron_nutag_ua_tolvolgoo":
				return ec.fieldContext_paginate_sub_oron_nutag_ua_tolvolgoo(ctx, field)
			case "view_oron_nutag_zovlol":
				return ec.fieldContext_paginate_view_oron_nutag_zovlol(ctx, field)
			case "sub_undes_zovlol_huraldaan":
				return ec.fieldContext_paginate_sub_undes_zovlol_huraldaan(ctx, field)
			case "sub_undes_zovlol_gamshig_ersdel_buuruulah":
				return ec.fieldContext_paginate_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field)
			case "view_undesnii_zovlol":
				return ec.fieldContext_paginate_view_undesnii_zovlol(ctx, field)
			case "lut_angi":
				return ec.fieldContext_paginate_lut_angi(ctx, field)
			case "sub_news_social_typies":
				return ec.fieldContext_paginate_sub_news_social_typies(ctx, field)
			case "view_news":
				return ec.fieldContext_paginate_view_news(ctx, field)
			case "lut_news_type":
				return ec.fieldContext_paginate_lut_news_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type paginate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_paginate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubNewsSocialTypies_id(ctx context.Context, field graphql.CollectedField, obj *models.SubNewsSocialTypies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubNewsSocialTypies_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubNewsSocialTypies_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubNewsSocialTypies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubNewsSocialTypies_news_id(ctx context.Context, field graphql.CollectedField, obj *models.SubNewsSocialTypies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubNewsSocialTypies_news_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubNewsSocialTypies_news_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubNewsSocialTypies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubNewsSocialTypies_social_type_id(ctx context.Context, field graphql.CollectedField, obj *models.SubNewsSocialTypies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubNewsSocialTypies_social_type_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubNewsSocialTypies_social_type_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubNewsSocialTypies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagGamshigErsdel_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagGamshigErsdel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagGamshigErsdel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagGamshigErsdel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagGamshigErsdel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagGamshigErsdel_o_zovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagGamshigErsdel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagGamshigErsdel_o_zovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OZovlolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagGamshigErsdel_o_zovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagGamshigErsdel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagGamshigErsdel_ognoo(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagGamshigErsdel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagGamshigErsdel_ognoo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ognoo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DB.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋlambdaᚑplatformᚋlambdaᚋDBᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagGamshigErsdel_ognoo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagGamshigErsdel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagGamshigErsdel_tosov(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagGamshigErsdel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagGamshigErsdel_tosov(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tosov, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagGamshigErsdel_tosov(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagGamshigErsdel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagTogtool_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagTogtool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagTogtool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagTogtool_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagTogtool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagTogtool_o_zovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagTogtool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagTogtool_o_zovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OZovlolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagTogtool_o_zovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagTogtool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagTogtool_tailbar_en(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagTogtool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagTogtool_tailbar_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagTogtool_tailbar_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagTogtool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagTogtool_tailbar_mn(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagTogtool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagTogtool_tailbar_mn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarMn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagTogtool_tailbar_mn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagTogtool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagTogtool_togtool(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagTogtool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagTogtool_togtool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Togtool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagTogtool_togtool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagTogtool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaHeregjilt_huvi_mn(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaHeregjilt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaHeregjilt_huvi_mn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HuviMn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaHeregjilt_huvi_mn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaHeregjilt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaHeregjilt_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaHeregjilt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaHeregjilt_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaHeregjilt_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaHeregjilt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaHeregjilt_o_zovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaHeregjilt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaHeregjilt_o_zovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OZovlolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaHeregjilt_o_zovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaHeregjilt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaHeregjilt_tailbar(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaHeregjilt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaHeregjilt_tailbar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tailbar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaHeregjilt_tailbar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaHeregjilt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaHeregjilt_tailbar_en(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaHeregjilt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaHeregjilt_tailbar_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaHeregjilt_tailbar_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaHeregjilt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaTolvolgoo_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaTolvolgoo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaTolvolgoo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaTolvolgoo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaTolvolgoo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaTolvolgoo_o_zovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaTolvolgoo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaTolvolgoo_o_zovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OZovlolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaTolvolgoo_o_zovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaTolvolgoo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaTolvolgoo_tailbar_en(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaTolvolgoo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaTolvolgoo_tailbar_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaTolvolgoo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaTolvolgoo_tailbar_mn(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaTolvolgoo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_mn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarMn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaTolvolgoo_tailbar_mn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaTolvolgoo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubOronNutagUaTolvolgoo_tolvolgoo(ctx context.Context, field graphql.CollectedField, obj *models.SubOronNutagUaTolvolgoo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubOronNutagUaTolvolgoo_tolvolgoo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tolvolgoo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubOronNutagUaTolvolgoo_tolvolgoo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubOronNutagUaTolvolgoo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolGamshigErsdelBuuruulah_id(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolGamshigErsdelBuuruulah) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolGamshigErsdelBuuruulah",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolGamshigErsdelBuuruulah_tailbar_en(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolGamshigErsdelBuuruulah) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolGamshigErsdelBuuruulah",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolGamshigErsdelBuuruulah_tailbar_mn(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolGamshigErsdelBuuruulah) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_mn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarMn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_mn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolGamshigErsdelBuuruulah",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolGamshigErsdelBuuruulah_togtool_file(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolGamshigErsdelBuuruulah) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_togtool_file(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TogtoolFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_togtool_file(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolGamshigErsdelBuuruulah",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolGamshigErsdelBuuruulah_undes_zovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolGamshigErsdelBuuruulah) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_undes_zovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UndesZovlolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_undes_zovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolGamshigErsdelBuuruulah",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolHuraldaan_huraldaan(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolHuraldaan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Huraldaan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolHuraldaan_huraldaan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolHuraldaan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolHuraldaan_huraldaan_en(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolHuraldaan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HuraldaanEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolHuraldaan_huraldaan_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolHuraldaan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolHuraldaan_id(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolHuraldaan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolHuraldaan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolHuraldaan_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolHuraldaan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolHuraldaan_undes_zovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolHuraldaan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolHuraldaan_undes_zovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UndesZovlolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolHuraldaan_undes_zovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolHuraldaan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubUndesZovlolHuraldaan_zovlomj(ctx context.Context, field graphql.CollectedField, obj *models.SubUndesZovlolHuraldaan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubUndesZovlolHuraldaan_zovlomj(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zovlomj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubUndesZovlolHuraldaan_zovlomj(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubUndesZovlolHuraldaan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_barimt_ner_en(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_barimt_ner_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BarimtNerEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_barimt_ner_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_created_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_deleted_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_document_sorting(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_document_sorting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentSorting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_document_sorting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_document_sorting_en(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_document_sorting_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentSortingEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_document_sorting_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_document_sorting_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_document_sorting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentSortingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_document_sorting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_ez_barimt_bichgiin_ner(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_ez_barimt_bichgiin_ner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EzBarimtBichgiinNer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_ez_barimt_bichgiin_ner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_file_en(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_file_en(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileEn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_file_en(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_hawsralt(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_hawsralt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hawsralt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_hawsralt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_sub_document_sorting_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_sub_document_sorting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubDocumentSortingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_sub_document_sorting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewEzBodlogiinBb_updated_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewEzBodlogiinBb) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewEzBodlogiinBb_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewEzBodlogiinBb_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewEzBodlogiinBb",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_created_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_deleted_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_delgerengui(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_delgerengui(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delgerengui, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_delgerengui(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_garchig(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_garchig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Garchig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_garchig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_handalt(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_handalt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handalt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_handalt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_logo(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_logo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_news_type(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_news_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_news_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_news_type_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_news_type_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewsTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_news_type_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_share(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_share(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Share, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_share(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_updated_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_ursah_eseh(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_ursah_eseh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UrsahEseh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_ursah_eseh(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_zurag(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_zurag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zurag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_zurag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewNews_sub_news_social_typies(ctx context.Context, field graphql.CollectedField, obj *models.ViewNews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewNews_sub_news_social_typies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubNewsSocialTypies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubNewsSocialTypies)
	fc.Result = res
	return ec.marshalOSubNewsSocialTypies2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubNewsSocialTypiesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewNews_sub_news_social_typies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewNews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubNewsSocialTypies_id(ctx, field)
			case "news_id":
				return ec.fieldContext_SubNewsSocialTypies_news_id(ctx, field)
			case "social_type_id":
				return ec.fieldContext_SubNewsSocialTypies_social_type_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubNewsSocialTypies", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_aimag_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_aimag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AimagID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_aimag_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_aimagname(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_aimagname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aimagname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_aimagname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_created_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_deleted_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_sum_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_sum_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_sum_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_sumname(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_sumname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sumname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_sumname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_updated_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_sub_oron_nutag_gamshig_ersdel(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_gamshig_ersdel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagGamshigErsdel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagGamshigErsdel)
	fc.Result = res
	return ec.marshalOSubOronNutagGamshigErsdel2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagGamshigErsdelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_sub_oron_nutag_gamshig_ersdel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagGamshigErsdel_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagGamshigErsdel_o_zovlol_id(ctx, field)
			case "ognoo":
				return ec.fieldContext_SubOronNutagGamshigErsdel_ognoo(ctx, field)
			case "tosov":
				return ec.fieldContext_SubOronNutagGamshigErsdel_tosov(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagGamshigErsdel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_sub_oron_nutag_togtool(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_togtool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagTogtool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagTogtool)
	fc.Result = res
	return ec.marshalOSubOronNutagTogtool2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagTogtoolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_sub_oron_nutag_togtool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagTogtool_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagTogtool_o_zovlol_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagTogtool_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubOronNutagTogtool_tailbar_mn(ctx, field)
			case "togtool":
				return ec.fieldContext_SubOronNutagTogtool_togtool(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagTogtool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_sub_oron_nutag_ua_heregjilt(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_heregjilt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagUaHeregjilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagUaHeregjilt)
	fc.Result = res
	return ec.marshalOSubOronNutagUaHeregjilt2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaHeregjiltᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_heregjilt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "huvi_mn":
				return ec.fieldContext_SubOronNutagUaHeregjilt_huvi_mn(ctx, field)
			case "id":
				return ec.fieldContext_SubOronNutagUaHeregjilt_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagUaHeregjilt_o_zovlol_id(ctx, field)
			case "tailbar":
				return ec.fieldContext_SubOronNutagUaHeregjilt_tailbar(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagUaHeregjilt_tailbar_en(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagUaHeregjilt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewOronNutagZovlol_sub_oron_nutag_ua_tolvolgoo(ctx context.Context, field graphql.CollectedField, obj *models.ViewOronNutagZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_tolvolgoo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagUaTolvolgoo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagUaTolvolgoo)
	fc.Result = res
	return ec.marshalOSubOronNutagUaTolvolgoo2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaTolvolgooᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_tolvolgoo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewOronNutagZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_o_zovlol_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_mn(ctx, field)
			case "tolvolgoo":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tolvolgoo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagUaTolvolgoo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_created_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_deleted_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_huraldaan(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_huraldaan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Huraldaan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_huraldaan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_id(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_tailbar_mn_bureldehuun(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_tailbar_mn_bureldehuun(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TailbarMnBureldehuun, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_tailbar_mn_bureldehuun(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_updated_at(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubUndesZovlolGamshigErsdelBuuruulah, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubUndesZovlolGamshigErsdelBuuruulah)
	fc.Result = res
	return ec.marshalOSubUndesZovlolGamshigErsdelBuuruulah2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolGamshigErsdelBuuruulahᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_mn(ctx, field)
			case "togtool_file":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_togtool_file(ctx, field)
			case "undes_zovlol_id":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_undes_zovlol_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubUndesZovlolGamshigErsdelBuuruulah", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewUndesniiZovlol_sub_undes_zovlol_huraldaan(ctx context.Context, field graphql.CollectedField, obj *models.ViewUndesniiZovlol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_huraldaan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubUndesZovlolHuraldaan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubUndesZovlolHuraldaan)
	fc.Result = res
	return ec.marshalOSubUndesZovlolHuraldaan2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolHuraldaanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_huraldaan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewUndesniiZovlol",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "huraldaan":
				return ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan(ctx, field)
			case "huraldaan_en":
				return ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan_en(ctx, field)
			case "id":
				return ec.fieldContext_SubUndesZovlolHuraldaan_id(ctx, field)
			case "undes_zovlol_id":
				return ec.fieldContext_SubUndesZovlolHuraldaan_undes_zovlol_id(ctx, field)
			case "zovlomj":
				return ec.fieldContext_SubUndesZovlolHuraldaan_zovlomj(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubUndesZovlolHuraldaan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _deleted_id(ctx context.Context, field graphql.CollectedField, obj *model.Deleted) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_deleted_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_deleted_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "deleted",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_page(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_total(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_last_page(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_last_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_last_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_lut_document_sorting(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_lut_document_sorting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LutDocumentSorting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LutDocumentSorting)
	fc.Result = res
	return ec.marshalOLutDocumentSorting2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutDocumentSortingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_lut_document_sorting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "document_sorting":
				return ec.fieldContext_LutDocumentSorting_document_sorting(ctx, field)
			case "document_sorting_en":
				return ec.fieldContext_LutDocumentSorting_document_sorting_en(ctx, field)
			case "id":
				return ec.fieldContext_LutDocumentSorting_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LutDocumentSorting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_view_ez_bodlogiin_bb(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_view_ez_bodlogiin_bb(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewEzBodlogiinBb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewEzBodlogiinBb)
	fc.Result = res
	return ec.marshalOViewEzBodlogiinBb2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewEzBodlogiinBbᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_view_ez_bodlogiin_bb(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "barimt_ner_en":
				return ec.fieldContext_ViewEzBodlogiinBb_barimt_ner_en(ctx, field)
			case "created_at":
				return ec.fieldContext_ViewEzBodlogiinBb_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewEzBodlogiinBb_deleted_at(ctx, field)
			case "document_sorting":
				return ec.fieldContext_ViewEzBodlogiinBb_document_sorting(ctx, field)
			case "document_sorting_en":
				return ec.fieldContext_ViewEzBodlogiinBb_document_sorting_en(ctx, field)
			case "document_sorting_id":
				return ec.fieldContext_ViewEzBodlogiinBb_document_sorting_id(ctx, field)
			case "ez_barimt_bichgiin_ner":
				return ec.fieldContext_ViewEzBodlogiinBb_ez_barimt_bichgiin_ner(ctx, field)
			case "file_en":
				return ec.fieldContext_ViewEzBodlogiinBb_file_en(ctx, field)
			case "hawsralt":
				return ec.fieldContext_ViewEzBodlogiinBb_hawsralt(ctx, field)
			case "id":
				return ec.fieldContext_ViewEzBodlogiinBb_id(ctx, field)
			case "sub_document_sorting_id":
				return ec.fieldContext_ViewEzBodlogiinBb_sub_document_sorting_id(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewEzBodlogiinBb_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewEzBodlogiinBb", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_hamtragch_baiguullaga(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_hamtragch_baiguullaga(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HamtragchBaiguullaga, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.HamtragchBaiguullaga)
	fc.Result = res
	return ec.marshalOHamtragchBaiguullaga2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐHamtragchBaiguullagaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_hamtragch_baiguullaga(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "b_ner":
				return ec.fieldContext_HamtragchBaiguullaga_b_ner(ctx, field)
			case "created_at":
				return ec.fieldContext_HamtragchBaiguullaga_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_HamtragchBaiguullaga_deleted_at(ctx, field)
			case "id":
				return ec.fieldContext_HamtragchBaiguullaga_id(ctx, field)
			case "link":
				return ec.fieldContext_HamtragchBaiguullaga_link(ctx, field)
			case "logo":
				return ec.fieldContext_HamtragchBaiguullaga_logo(ctx, field)
			case "updated_at":
				return ec.fieldContext_HamtragchBaiguullaga_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HamtragchBaiguullaga", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_sub_oron_nutag_gamshig_ersdel(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_sub_oron_nutag_gamshig_ersdel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagGamshigErsdel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagGamshigErsdel)
	fc.Result = res
	return ec.marshalOSubOronNutagGamshigErsdel2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagGamshigErsdelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_sub_oron_nutag_gamshig_ersdel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagGamshigErsdel_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagGamshigErsdel_o_zovlol_id(ctx, field)
			case "ognoo":
				return ec.fieldContext_SubOronNutagGamshigErsdel_ognoo(ctx, field)
			case "tosov":
				return ec.fieldContext_SubOronNutagGamshigErsdel_tosov(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagGamshigErsdel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_sub_oron_nutag_togtool(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_sub_oron_nutag_togtool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagTogtool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagTogtool)
	fc.Result = res
	return ec.marshalOSubOronNutagTogtool2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagTogtoolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_sub_oron_nutag_togtool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagTogtool_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagTogtool_o_zovlol_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagTogtool_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubOronNutagTogtool_tailbar_mn(ctx, field)
			case "togtool":
				return ec.fieldContext_SubOronNutagTogtool_togtool(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagTogtool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_sub_oron_nutag_ua_heregjilt(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_sub_oron_nutag_ua_heregjilt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagUaHeregjilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagUaHeregjilt)
	fc.Result = res
	return ec.marshalOSubOronNutagUaHeregjilt2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaHeregjiltᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_sub_oron_nutag_ua_heregjilt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "huvi_mn":
				return ec.fieldContext_SubOronNutagUaHeregjilt_huvi_mn(ctx, field)
			case "id":
				return ec.fieldContext_SubOronNutagUaHeregjilt_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagUaHeregjilt_o_zovlol_id(ctx, field)
			case "tailbar":
				return ec.fieldContext_SubOronNutagUaHeregjilt_tailbar(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagUaHeregjilt_tailbar_en(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagUaHeregjilt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_sub_oron_nutag_ua_tolvolgoo(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_sub_oron_nutag_ua_tolvolgoo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOronNutagUaTolvolgoo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubOronNutagUaTolvolgoo)
	fc.Result = res
	return ec.marshalOSubOronNutagUaTolvolgoo2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaTolvolgooᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_sub_oron_nutag_ua_tolvolgoo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_id(ctx, field)
			case "o_zovlol_id":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_o_zovlol_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tailbar_mn(ctx, field)
			case "tolvolgoo":
				return ec.fieldContext_SubOronNutagUaTolvolgoo_tolvolgoo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubOronNutagUaTolvolgoo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_view_oron_nutag_zovlol(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_view_oron_nutag_zovlol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewOronNutagZovlol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewOronNutagZovlol)
	fc.Result = res
	return ec.marshalOViewOronNutagZovlol2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewOronNutagZovlolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_view_oron_nutag_zovlol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "aimag_id":
				return ec.fieldContext_ViewOronNutagZovlol_aimag_id(ctx, field)
			case "aimagname":
				return ec.fieldContext_ViewOronNutagZovlol_aimagname(ctx, field)
			case "created_at":
				return ec.fieldContext_ViewOronNutagZovlol_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewOronNutagZovlol_deleted_at(ctx, field)
			case "id":
				return ec.fieldContext_ViewOronNutagZovlol_id(ctx, field)
			case "sum_id":
				return ec.fieldContext_ViewOronNutagZovlol_sum_id(ctx, field)
			case "sumname":
				return ec.fieldContext_ViewOronNutagZovlol_sumname(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewOronNutagZovlol_updated_at(ctx, field)
			case "sub_oron_nutag_gamshig_ersdel":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_gamshig_ersdel(ctx, field)
			case "sub_oron_nutag_togtool":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_togtool(ctx, field)
			case "sub_oron_nutag_ua_heregjilt":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_heregjilt(ctx, field)
			case "sub_oron_nutag_ua_tolvolgoo":
				return ec.fieldContext_ViewOronNutagZovlol_sub_oron_nutag_ua_tolvolgoo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewOronNutagZovlol", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_sub_undes_zovlol_huraldaan(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_sub_undes_zovlol_huraldaan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubUndesZovlolHuraldaan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubUndesZovlolHuraldaan)
	fc.Result = res
	return ec.marshalOSubUndesZovlolHuraldaan2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolHuraldaanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_sub_undes_zovlol_huraldaan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "huraldaan":
				return ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan(ctx, field)
			case "huraldaan_en":
				return ec.fieldContext_SubUndesZovlolHuraldaan_huraldaan_en(ctx, field)
			case "id":
				return ec.fieldContext_SubUndesZovlolHuraldaan_id(ctx, field)
			case "undes_zovlol_id":
				return ec.fieldContext_SubUndesZovlolHuraldaan_undes_zovlol_id(ctx, field)
			case "zovlomj":
				return ec.fieldContext_SubUndesZovlolHuraldaan_zovlomj(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubUndesZovlolHuraldaan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubUndesZovlolGamshigErsdelBuuruulah, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubUndesZovlolGamshigErsdelBuuruulah)
	fc.Result = res
	return ec.marshalOSubUndesZovlolGamshigErsdelBuuruulah2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolGamshigErsdelBuuruulahᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_id(ctx, field)
			case "tailbar_en":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_en(ctx, field)
			case "tailbar_mn":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_tailbar_mn(ctx, field)
			case "togtool_file":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_togtool_file(ctx, field)
			case "undes_zovlol_id":
				return ec.fieldContext_SubUndesZovlolGamshigErsdelBuuruulah_undes_zovlol_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubUndesZovlolGamshigErsdelBuuruulah", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_view_undesnii_zovlol(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_view_undesnii_zovlol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewUndesniiZovlol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewUndesniiZovlol)
	fc.Result = res
	return ec.marshalOViewUndesniiZovlol2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewUndesniiZovlolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_view_undesnii_zovlol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "created_at":
				return ec.fieldContext_ViewUndesniiZovlol_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewUndesniiZovlol_deleted_at(ctx, field)
			case "huraldaan":
				return ec.fieldContext_ViewUndesniiZovlol_huraldaan(ctx, field)
			case "id":
				return ec.fieldContext_ViewUndesniiZovlol_id(ctx, field)
			case "tailbar_mn_bureldehuun":
				return ec.fieldContext_ViewUndesniiZovlol_tailbar_mn_bureldehuun(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewUndesniiZovlol_updated_at(ctx, field)
			case "sub_undes_zovlol_gamshig_ersdel_buuruulah":
				return ec.fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field)
			case "sub_undes_zovlol_huraldaan":
				return ec.fieldContext_ViewUndesniiZovlol_sub_undes_zovlol_huraldaan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewUndesniiZovlol", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_lut_angi(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_lut_angi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LutAngi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LutAngi)
	fc.Result = res
	return ec.marshalOLutAngi2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutAngiᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_lut_angi(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "angi":
				return ec.fieldContext_LutAngi_angi(ctx, field)
			case "id":
				return ec.fieldContext_LutAngi_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LutAngi", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_sub_news_social_typies(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_sub_news_social_typies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubNewsSocialTypies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SubNewsSocialTypies)
	fc.Result = res
	return ec.marshalOSubNewsSocialTypies2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubNewsSocialTypiesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_sub_news_social_typies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubNewsSocialTypies_id(ctx, field)
			case "news_id":
				return ec.fieldContext_SubNewsSocialTypies_news_id(ctx, field)
			case "social_type_id":
				return ec.fieldContext_SubNewsSocialTypies_social_type_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubNewsSocialTypies", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_view_news(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_view_news(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewNews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ViewNews)
	fc.Result = res
	return ec.marshalOViewNews2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewNewsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_view_news(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "created_at":
				return ec.fieldContext_ViewNews_created_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_ViewNews_deleted_at(ctx, field)
			case "delgerengui":
				return ec.fieldContext_ViewNews_delgerengui(ctx, field)
			case "garchig":
				return ec.fieldContext_ViewNews_garchig(ctx, field)
			case "handalt":
				return ec.fieldContext_ViewNews_handalt(ctx, field)
			case "id":
				return ec.fieldContext_ViewNews_id(ctx, field)
			case "logo":
				return ec.fieldContext_ViewNews_logo(ctx, field)
			case "news_type":
				return ec.fieldContext_ViewNews_news_type(ctx, field)
			case "news_type_id":
				return ec.fieldContext_ViewNews_news_type_id(ctx, field)
			case "share":
				return ec.fieldContext_ViewNews_share(ctx, field)
			case "updated_at":
				return ec.fieldContext_ViewNews_updated_at(ctx, field)
			case "ursah_eseh":
				return ec.fieldContext_ViewNews_ursah_eseh(ctx, field)
			case "zurag":
				return ec.fieldContext_ViewNews_zurag(ctx, field)
			case "sub_news_social_typies":
				return ec.fieldContext_ViewNews_sub_news_social_typies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewNews", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_lut_news_type(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_lut_news_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LutNewsType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LutNewsType)
	fc.Result = res
	return ec.marshalOLutNewsType2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutNewsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_lut_news_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LutNewsType_id(ctx, field)
			case "news_type":
				return ec.fieldContext_LutNewsType_news_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LutNewsType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _subTable_table(ctx context.Context, field graphql.CollectedField, obj *model.SubTable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_subTable_table(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Table, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_subTable_table(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "subTable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _subTable_parentIdentity(ctx context.Context, field graphql.CollectedField, obj *model.SubTable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_subTable_parentIdentity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentIdentity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_subTable_parentIdentity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "subTable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _subTable_ConnectionField(ctx context.Context, field graphql.CollectedField, obj *model.SubTable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_subTable_ConnectionField(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionField, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_subTable_ConnectionField(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "subTable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputfilter(ctx context.Context, obj interface{}) (model.Filter, error) {
	var it model.Filter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
			it.Condition, err = ec.unmarshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgroupFilter(ctx context.Context, obj interface{}) (model.GroupFilter, error) {
	var it model.GroupFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "filters":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
			it.Filters, err = ec.unmarshalNfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "combine":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("combine"))
			it.Combine, err = ec.unmarshalNcombine2lambdaᚋlambdaᚋgraphᚋmodelᚐCombine(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsort(ctx context.Context, obj interface{}) (model.Sort, error) {
	var it model.Sort
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubFilter(ctx context.Context, obj interface{}) (model.SubFilter, error) {
	var it model.SubFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "table":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("table"))
			it.Table, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
			it.Condition, err = ec.unmarshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubSort(ctx context.Context, obj interface{}) (model.SubSort, error) {
	var it model.SubSort
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "table":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("table"))
			it.Table, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var hamtragchBaiguullagaImplementors = []string{"HamtragchBaiguullaga"}

func (ec *executionContext) _HamtragchBaiguullaga(ctx context.Context, sel ast.SelectionSet, obj *models.HamtragchBaiguullaga) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hamtragchBaiguullagaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HamtragchBaiguullaga")
		case "b_ner":

			out.Values[i] = ec._HamtragchBaiguullaga_b_ner(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._HamtragchBaiguullaga_created_at(ctx, field, obj)

		case "deleted_at":

			out.Values[i] = ec._HamtragchBaiguullaga_deleted_at(ctx, field, obj)

		case "id":

			out.Values[i] = ec._HamtragchBaiguullaga_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "link":

			out.Values[i] = ec._HamtragchBaiguullaga_link(ctx, field, obj)

		case "logo":

			out.Values[i] = ec._HamtragchBaiguullaga_logo(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._HamtragchBaiguullaga_updated_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lutAngiImplementors = []string{"LutAngi"}

func (ec *executionContext) _LutAngi(ctx context.Context, sel ast.SelectionSet, obj *models.LutAngi) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lutAngiImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LutAngi")
		case "angi":

			out.Values[i] = ec._LutAngi_angi(ctx, field, obj)

		case "id":

			out.Values[i] = ec._LutAngi_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lutDocumentSortingImplementors = []string{"LutDocumentSorting"}

func (ec *executionContext) _LutDocumentSorting(ctx context.Context, sel ast.SelectionSet, obj *models.LutDocumentSorting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lutDocumentSortingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LutDocumentSorting")
		case "document_sorting":

			out.Values[i] = ec._LutDocumentSorting_document_sorting(ctx, field, obj)

		case "document_sorting_en":

			out.Values[i] = ec._LutDocumentSorting_document_sorting_en(ctx, field, obj)

		case "id":

			out.Values[i] = ec._LutDocumentSorting_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lutNewsTypeImplementors = []string{"LutNewsType"}

func (ec *executionContext) _LutNewsType(ctx context.Context, sel ast.SelectionSet, obj *models.LutNewsType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lutNewsTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LutNewsType")
		case "id":

			out.Values[i] = ec._LutNewsType_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "news_type":

			out.Values[i] = ec._LutNewsType_news_type(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "lut_document_sorting":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lut_document_sorting(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "view_ez_bodlogiin_bb":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_view_ez_bodlogiin_bb(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "hamtragch_baiguullaga":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_hamtragch_baiguullaga(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sub_oron_nutag_gamshig_ersdel":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sub_oron_nutag_gamshig_ersdel(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sub_oron_nutag_togtool":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sub_oron_nutag_togtool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sub_oron_nutag_ua_heregjilt":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sub_oron_nutag_ua_heregjilt(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sub_oron_nutag_ua_tolvolgoo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sub_oron_nutag_ua_tolvolgoo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "view_oron_nutag_zovlol":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_view_oron_nutag_zovlol(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sub_undes_zovlol_huraldaan":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sub_undes_zovlol_huraldaan(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sub_undes_zovlol_gamshig_ersdel_buuruulah":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "view_undesnii_zovlol":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_view_undesnii_zovlol(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "lut_angi":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lut_angi(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sub_news_social_typies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sub_news_social_typies(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "view_news":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_view_news(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "lut_news_type":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lut_news_type(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "paginate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_paginate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subNewsSocialTypiesImplementors = []string{"SubNewsSocialTypies"}

func (ec *executionContext) _SubNewsSocialTypies(ctx context.Context, sel ast.SelectionSet, obj *models.SubNewsSocialTypies) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subNewsSocialTypiesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubNewsSocialTypies")
		case "id":

			out.Values[i] = ec._SubNewsSocialTypies_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "news_id":

			out.Values[i] = ec._SubNewsSocialTypies_news_id(ctx, field, obj)

		case "social_type_id":

			out.Values[i] = ec._SubNewsSocialTypies_social_type_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subOronNutagGamshigErsdelImplementors = []string{"SubOronNutagGamshigErsdel"}

func (ec *executionContext) _SubOronNutagGamshigErsdel(ctx context.Context, sel ast.SelectionSet, obj *models.SubOronNutagGamshigErsdel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subOronNutagGamshigErsdelImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubOronNutagGamshigErsdel")
		case "id":

			out.Values[i] = ec._SubOronNutagGamshigErsdel_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "o_zovlol_id":

			out.Values[i] = ec._SubOronNutagGamshigErsdel_o_zovlol_id(ctx, field, obj)

		case "ognoo":

			out.Values[i] = ec._SubOronNutagGamshigErsdel_ognoo(ctx, field, obj)

		case "tosov":

			out.Values[i] = ec._SubOronNutagGamshigErsdel_tosov(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subOronNutagTogtoolImplementors = []string{"SubOronNutagTogtool"}

func (ec *executionContext) _SubOronNutagTogtool(ctx context.Context, sel ast.SelectionSet, obj *models.SubOronNutagTogtool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subOronNutagTogtoolImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubOronNutagTogtool")
		case "id":

			out.Values[i] = ec._SubOronNutagTogtool_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "o_zovlol_id":

			out.Values[i] = ec._SubOronNutagTogtool_o_zovlol_id(ctx, field, obj)

		case "tailbar_en":

			out.Values[i] = ec._SubOronNutagTogtool_tailbar_en(ctx, field, obj)

		case "tailbar_mn":

			out.Values[i] = ec._SubOronNutagTogtool_tailbar_mn(ctx, field, obj)

		case "togtool":

			out.Values[i] = ec._SubOronNutagTogtool_togtool(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subOronNutagUaHeregjiltImplementors = []string{"SubOronNutagUaHeregjilt"}

func (ec *executionContext) _SubOronNutagUaHeregjilt(ctx context.Context, sel ast.SelectionSet, obj *models.SubOronNutagUaHeregjilt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subOronNutagUaHeregjiltImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubOronNutagUaHeregjilt")
		case "huvi_mn":

			out.Values[i] = ec._SubOronNutagUaHeregjilt_huvi_mn(ctx, field, obj)

		case "id":

			out.Values[i] = ec._SubOronNutagUaHeregjilt_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "o_zovlol_id":

			out.Values[i] = ec._SubOronNutagUaHeregjilt_o_zovlol_id(ctx, field, obj)

		case "tailbar":

			out.Values[i] = ec._SubOronNutagUaHeregjilt_tailbar(ctx, field, obj)

		case "tailbar_en":

			out.Values[i] = ec._SubOronNutagUaHeregjilt_tailbar_en(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subOronNutagUaTolvolgooImplementors = []string{"SubOronNutagUaTolvolgoo"}

func (ec *executionContext) _SubOronNutagUaTolvolgoo(ctx context.Context, sel ast.SelectionSet, obj *models.SubOronNutagUaTolvolgoo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subOronNutagUaTolvolgooImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubOronNutagUaTolvolgoo")
		case "id":

			out.Values[i] = ec._SubOronNutagUaTolvolgoo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "o_zovlol_id":

			out.Values[i] = ec._SubOronNutagUaTolvolgoo_o_zovlol_id(ctx, field, obj)

		case "tailbar_en":

			out.Values[i] = ec._SubOronNutagUaTolvolgoo_tailbar_en(ctx, field, obj)

		case "tailbar_mn":

			out.Values[i] = ec._SubOronNutagUaTolvolgoo_tailbar_mn(ctx, field, obj)

		case "tolvolgoo":

			out.Values[i] = ec._SubOronNutagUaTolvolgoo_tolvolgoo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subUndesZovlolGamshigErsdelBuuruulahImplementors = []string{"SubUndesZovlolGamshigErsdelBuuruulah"}

func (ec *executionContext) _SubUndesZovlolGamshigErsdelBuuruulah(ctx context.Context, sel ast.SelectionSet, obj *models.SubUndesZovlolGamshigErsdelBuuruulah) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subUndesZovlolGamshigErsdelBuuruulahImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubUndesZovlolGamshigErsdelBuuruulah")
		case "id":

			out.Values[i] = ec._SubUndesZovlolGamshigErsdelBuuruulah_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tailbar_en":

			out.Values[i] = ec._SubUndesZovlolGamshigErsdelBuuruulah_tailbar_en(ctx, field, obj)

		case "tailbar_mn":

			out.Values[i] = ec._SubUndesZovlolGamshigErsdelBuuruulah_tailbar_mn(ctx, field, obj)

		case "togtool_file":

			out.Values[i] = ec._SubUndesZovlolGamshigErsdelBuuruulah_togtool_file(ctx, field, obj)

		case "undes_zovlol_id":

			out.Values[i] = ec._SubUndesZovlolGamshigErsdelBuuruulah_undes_zovlol_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subUndesZovlolHuraldaanImplementors = []string{"SubUndesZovlolHuraldaan"}

func (ec *executionContext) _SubUndesZovlolHuraldaan(ctx context.Context, sel ast.SelectionSet, obj *models.SubUndesZovlolHuraldaan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subUndesZovlolHuraldaanImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubUndesZovlolHuraldaan")
		case "huraldaan":

			out.Values[i] = ec._SubUndesZovlolHuraldaan_huraldaan(ctx, field, obj)

		case "huraldaan_en":

			out.Values[i] = ec._SubUndesZovlolHuraldaan_huraldaan_en(ctx, field, obj)

		case "id":

			out.Values[i] = ec._SubUndesZovlolHuraldaan_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "undes_zovlol_id":

			out.Values[i] = ec._SubUndesZovlolHuraldaan_undes_zovlol_id(ctx, field, obj)

		case "zovlomj":

			out.Values[i] = ec._SubUndesZovlolHuraldaan_zovlomj(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var viewEzBodlogiinBbImplementors = []string{"ViewEzBodlogiinBb"}

func (ec *executionContext) _ViewEzBodlogiinBb(ctx context.Context, sel ast.SelectionSet, obj *models.ViewEzBodlogiinBb) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewEzBodlogiinBbImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViewEzBodlogiinBb")
		case "barimt_ner_en":

			out.Values[i] = ec._ViewEzBodlogiinBb_barimt_ner_en(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._ViewEzBodlogiinBb_created_at(ctx, field, obj)

		case "deleted_at":

			out.Values[i] = ec._ViewEzBodlogiinBb_deleted_at(ctx, field, obj)

		case "document_sorting":

			out.Values[i] = ec._ViewEzBodlogiinBb_document_sorting(ctx, field, obj)

		case "document_sorting_en":

			out.Values[i] = ec._ViewEzBodlogiinBb_document_sorting_en(ctx, field, obj)

		case "document_sorting_id":

			out.Values[i] = ec._ViewEzBodlogiinBb_document_sorting_id(ctx, field, obj)

		case "ez_barimt_bichgiin_ner":

			out.Values[i] = ec._ViewEzBodlogiinBb_ez_barimt_bichgiin_ner(ctx, field, obj)

		case "file_en":

			out.Values[i] = ec._ViewEzBodlogiinBb_file_en(ctx, field, obj)

		case "hawsralt":

			out.Values[i] = ec._ViewEzBodlogiinBb_hawsralt(ctx, field, obj)

		case "id":

			out.Values[i] = ec._ViewEzBodlogiinBb_id(ctx, field, obj)

		case "sub_document_sorting_id":

			out.Values[i] = ec._ViewEzBodlogiinBb_sub_document_sorting_id(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._ViewEzBodlogiinBb_updated_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var viewNewsImplementors = []string{"ViewNews"}

func (ec *executionContext) _ViewNews(ctx context.Context, sel ast.SelectionSet, obj *models.ViewNews) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewNewsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViewNews")
		case "created_at":

			out.Values[i] = ec._ViewNews_created_at(ctx, field, obj)

		case "deleted_at":

			out.Values[i] = ec._ViewNews_deleted_at(ctx, field, obj)

		case "delgerengui":

			out.Values[i] = ec._ViewNews_delgerengui(ctx, field, obj)

		case "garchig":

			out.Values[i] = ec._ViewNews_garchig(ctx, field, obj)

		case "handalt":

			out.Values[i] = ec._ViewNews_handalt(ctx, field, obj)

		case "id":

			out.Values[i] = ec._ViewNews_id(ctx, field, obj)

		case "logo":

			out.Values[i] = ec._ViewNews_logo(ctx, field, obj)

		case "news_type":

			out.Values[i] = ec._ViewNews_news_type(ctx, field, obj)

		case "news_type_id":

			out.Values[i] = ec._ViewNews_news_type_id(ctx, field, obj)

		case "share":

			out.Values[i] = ec._ViewNews_share(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._ViewNews_updated_at(ctx, field, obj)

		case "ursah_eseh":

			out.Values[i] = ec._ViewNews_ursah_eseh(ctx, field, obj)

		case "zurag":

			out.Values[i] = ec._ViewNews_zurag(ctx, field, obj)

		case "sub_news_social_typies":

			out.Values[i] = ec._ViewNews_sub_news_social_typies(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var viewOronNutagZovlolImplementors = []string{"ViewOronNutagZovlol"}

func (ec *executionContext) _ViewOronNutagZovlol(ctx context.Context, sel ast.SelectionSet, obj *models.ViewOronNutagZovlol) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewOronNutagZovlolImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViewOronNutagZovlol")
		case "aimag_id":

			out.Values[i] = ec._ViewOronNutagZovlol_aimag_id(ctx, field, obj)

		case "aimagname":

			out.Values[i] = ec._ViewOronNutagZovlol_aimagname(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._ViewOronNutagZovlol_created_at(ctx, field, obj)

		case "deleted_at":

			out.Values[i] = ec._ViewOronNutagZovlol_deleted_at(ctx, field, obj)

		case "id":

			out.Values[i] = ec._ViewOronNutagZovlol_id(ctx, field, obj)

		case "sum_id":

			out.Values[i] = ec._ViewOronNutagZovlol_sum_id(ctx, field, obj)

		case "sumname":

			out.Values[i] = ec._ViewOronNutagZovlol_sumname(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._ViewOronNutagZovlol_updated_at(ctx, field, obj)

		case "sub_oron_nutag_gamshig_ersdel":

			out.Values[i] = ec._ViewOronNutagZovlol_sub_oron_nutag_gamshig_ersdel(ctx, field, obj)

		case "sub_oron_nutag_togtool":

			out.Values[i] = ec._ViewOronNutagZovlol_sub_oron_nutag_togtool(ctx, field, obj)

		case "sub_oron_nutag_ua_heregjilt":

			out.Values[i] = ec._ViewOronNutagZovlol_sub_oron_nutag_ua_heregjilt(ctx, field, obj)

		case "sub_oron_nutag_ua_tolvolgoo":

			out.Values[i] = ec._ViewOronNutagZovlol_sub_oron_nutag_ua_tolvolgoo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var viewUndesniiZovlolImplementors = []string{"ViewUndesniiZovlol"}

func (ec *executionContext) _ViewUndesniiZovlol(ctx context.Context, sel ast.SelectionSet, obj *models.ViewUndesniiZovlol) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewUndesniiZovlolImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViewUndesniiZovlol")
		case "created_at":

			out.Values[i] = ec._ViewUndesniiZovlol_created_at(ctx, field, obj)

		case "deleted_at":

			out.Values[i] = ec._ViewUndesniiZovlol_deleted_at(ctx, field, obj)

		case "huraldaan":

			out.Values[i] = ec._ViewUndesniiZovlol_huraldaan(ctx, field, obj)

		case "id":

			out.Values[i] = ec._ViewUndesniiZovlol_id(ctx, field, obj)

		case "tailbar_mn_bureldehuun":

			out.Values[i] = ec._ViewUndesniiZovlol_tailbar_mn_bureldehuun(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._ViewUndesniiZovlol_updated_at(ctx, field, obj)

		case "sub_undes_zovlol_gamshig_ersdel_buuruulah":

			out.Values[i] = ec._ViewUndesniiZovlol_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field, obj)

		case "sub_undes_zovlol_huraldaan":

			out.Values[i] = ec._ViewUndesniiZovlol_sub_undes_zovlol_huraldaan(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deletedImplementors = []string{"deleted"}

func (ec *executionContext) _deleted(ctx context.Context, sel ast.SelectionSet, obj *model.Deleted) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletedImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("deleted")
		case "id":

			out.Values[i] = ec._deleted_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginateImplementors = []string{"paginate"}

func (ec *executionContext) _paginate(ctx context.Context, sel ast.SelectionSet, obj *model.Paginate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("paginate")
		case "page":

			out.Values[i] = ec._paginate_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":

			out.Values[i] = ec._paginate_total(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "last_page":

			out.Values[i] = ec._paginate_last_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lut_document_sorting":

			out.Values[i] = ec._paginate_lut_document_sorting(ctx, field, obj)

		case "view_ez_bodlogiin_bb":

			out.Values[i] = ec._paginate_view_ez_bodlogiin_bb(ctx, field, obj)

		case "hamtragch_baiguullaga":

			out.Values[i] = ec._paginate_hamtragch_baiguullaga(ctx, field, obj)

		case "sub_oron_nutag_gamshig_ersdel":

			out.Values[i] = ec._paginate_sub_oron_nutag_gamshig_ersdel(ctx, field, obj)

		case "sub_oron_nutag_togtool":

			out.Values[i] = ec._paginate_sub_oron_nutag_togtool(ctx, field, obj)

		case "sub_oron_nutag_ua_heregjilt":

			out.Values[i] = ec._paginate_sub_oron_nutag_ua_heregjilt(ctx, field, obj)

		case "sub_oron_nutag_ua_tolvolgoo":

			out.Values[i] = ec._paginate_sub_oron_nutag_ua_tolvolgoo(ctx, field, obj)

		case "view_oron_nutag_zovlol":

			out.Values[i] = ec._paginate_view_oron_nutag_zovlol(ctx, field, obj)

		case "sub_undes_zovlol_huraldaan":

			out.Values[i] = ec._paginate_sub_undes_zovlol_huraldaan(ctx, field, obj)

		case "sub_undes_zovlol_gamshig_ersdel_buuruulah":

			out.Values[i] = ec._paginate_sub_undes_zovlol_gamshig_ersdel_buuruulah(ctx, field, obj)

		case "view_undesnii_zovlol":

			out.Values[i] = ec._paginate_view_undesnii_zovlol(ctx, field, obj)

		case "lut_angi":

			out.Values[i] = ec._paginate_lut_angi(ctx, field, obj)

		case "sub_news_social_typies":

			out.Values[i] = ec._paginate_sub_news_social_typies(ctx, field, obj)

		case "view_news":

			out.Values[i] = ec._paginate_view_news(ctx, field, obj)

		case "lut_news_type":

			out.Values[i] = ec._paginate_lut_news_type(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subTableImplementors = []string{"subTable"}

func (ec *executionContext) _subTable(ctx context.Context, sel ast.SelectionSet, obj *model.SubTable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subTableImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subTable")
		case "table":

			out.Values[i] = ec._subTable_table(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentIdentity":

			out.Values[i] = ec._subTable_parentIdentity(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ConnectionField":

			out.Values[i] = ec._subTable_ConnectionField(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNHamtragchBaiguullaga2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐHamtragchBaiguullaga(ctx context.Context, sel ast.SelectionSet, v *models.HamtragchBaiguullaga) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HamtragchBaiguullaga(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLutAngi2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutAngi(ctx context.Context, sel ast.SelectionSet, v *models.LutAngi) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LutAngi(ctx, sel, v)
}

func (ec *executionContext) marshalNLutDocumentSorting2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutDocumentSorting(ctx context.Context, sel ast.SelectionSet, v *models.LutDocumentSorting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LutDocumentSorting(ctx, sel, v)
}

func (ec *executionContext) marshalNLutNewsType2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutNewsType(ctx context.Context, sel ast.SelectionSet, v *models.LutNewsType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LutNewsType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSubNewsSocialTypies2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubNewsSocialTypies(ctx context.Context, sel ast.SelectionSet, v *models.SubNewsSocialTypies) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubNewsSocialTypies(ctx, sel, v)
}

func (ec *executionContext) marshalNSubOronNutagGamshigErsdel2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagGamshigErsdel(ctx context.Context, sel ast.SelectionSet, v *models.SubOronNutagGamshigErsdel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubOronNutagGamshigErsdel(ctx, sel, v)
}

func (ec *executionContext) marshalNSubOronNutagTogtool2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagTogtool(ctx context.Context, sel ast.SelectionSet, v *models.SubOronNutagTogtool) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubOronNutagTogtool(ctx, sel, v)
}

func (ec *executionContext) marshalNSubOronNutagUaHeregjilt2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaHeregjilt(ctx context.Context, sel ast.SelectionSet, v *models.SubOronNutagUaHeregjilt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubOronNutagUaHeregjilt(ctx, sel, v)
}

func (ec *executionContext) marshalNSubOronNutagUaTolvolgoo2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaTolvolgoo(ctx context.Context, sel ast.SelectionSet, v *models.SubOronNutagUaTolvolgoo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubOronNutagUaTolvolgoo(ctx, sel, v)
}

func (ec *executionContext) marshalNSubUndesZovlolGamshigErsdelBuuruulah2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolGamshigErsdelBuuruulah(ctx context.Context, sel ast.SelectionSet, v *models.SubUndesZovlolGamshigErsdelBuuruulah) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubUndesZovlolGamshigErsdelBuuruulah(ctx, sel, v)
}

func (ec *executionContext) marshalNSubUndesZovlolHuraldaan2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolHuraldaan(ctx context.Context, sel ast.SelectionSet, v *models.SubUndesZovlolHuraldaan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubUndesZovlolHuraldaan(ctx, sel, v)
}

func (ec *executionContext) marshalNViewEzBodlogiinBb2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewEzBodlogiinBb(ctx context.Context, sel ast.SelectionSet, v *models.ViewEzBodlogiinBb) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ViewEzBodlogiinBb(ctx, sel, v)
}

func (ec *executionContext) marshalNViewNews2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewNews(ctx context.Context, sel ast.SelectionSet, v *models.ViewNews) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ViewNews(ctx, sel, v)
}

func (ec *executionContext) marshalNViewOronNutagZovlol2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewOronNutagZovlol(ctx context.Context, sel ast.SelectionSet, v *models.ViewOronNutagZovlol) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ViewOronNutagZovlol(ctx, sel, v)
}

func (ec *executionContext) marshalNViewUndesniiZovlol2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewUndesniiZovlol(ctx context.Context, sel ast.SelectionSet, v *models.ViewUndesniiZovlol) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ViewUndesniiZovlol(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNcombine2lambdaᚋlambdaᚋgraphᚋmodelᚐCombine(ctx context.Context, v interface{}) (model.Combine, error) {
	var res model.Combine
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNcombine2lambdaᚋlambdaᚋgraphᚋmodelᚐCombine(ctx context.Context, sel ast.SelectionSet, v model.Combine) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx context.Context, v interface{}) (model.Condition, error) {
	var res model.Condition
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNcondition2lambdaᚋlambdaᚋgraphᚋmodelᚐCondition(ctx context.Context, sel ast.SelectionSet, v model.Condition) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) ([]*model.Filter, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Filter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOfilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx context.Context, v interface{}) (model.Order, error) {
	var res model.Order
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx context.Context, sel ast.SelectionSet, v model.Order) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNpaginate2lambdaᚋlambdaᚋgraphᚋmodelᚐPaginate(ctx context.Context, sel ast.SelectionSet, v model.Paginate) graphql.Marshaler {
	return ec._paginate(ctx, sel, &v)
}

func (ec *executionContext) marshalNpaginate2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐPaginate(ctx context.Context, sel ast.SelectionSet, v *model.Paginate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._paginate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalODate2ᚖgithubᚗcomᚋlambdaᚑplatformᚋlambdaᚋDBᚐDate(ctx context.Context, v interface{}) (*DB.Date, error) {
	if v == nil {
		return nil, nil
	}
	res, err := custom_model.UnmarshalDate(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖgithubᚗcomᚋlambdaᚑplatformᚋlambdaᚋDBᚐDate(ctx context.Context, sel ast.SelectionSet, v *DB.Date) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := custom_model.MarshalDate(*v)
	return res
}

func (ec *executionContext) marshalOHamtragchBaiguullaga2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐHamtragchBaiguullagaᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.HamtragchBaiguullaga) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHamtragchBaiguullaga2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐHamtragchBaiguullaga(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOLutAngi2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutAngiᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.LutAngi) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLutAngi2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutAngi(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOLutDocumentSorting2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutDocumentSortingᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.LutDocumentSorting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLutDocumentSorting2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutDocumentSorting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOLutNewsType2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutNewsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.LutNewsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLutNewsType2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐLutNewsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSubNewsSocialTypies2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubNewsSocialTypiesᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubNewsSocialTypies) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubNewsSocialTypies2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubNewsSocialTypies(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSubOronNutagGamshigErsdel2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagGamshigErsdelᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubOronNutagGamshigErsdel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubOronNutagGamshigErsdel2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagGamshigErsdel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSubOronNutagTogtool2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagTogtoolᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubOronNutagTogtool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubOronNutagTogtool2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagTogtool(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSubOronNutagUaHeregjilt2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaHeregjiltᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubOronNutagUaHeregjilt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubOronNutagUaHeregjilt2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaHeregjilt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSubOronNutagUaTolvolgoo2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaTolvolgooᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubOronNutagUaTolvolgoo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubOronNutagUaTolvolgoo2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubOronNutagUaTolvolgoo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSubUndesZovlolGamshigErsdelBuuruulah2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolGamshigErsdelBuuruulahᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubUndesZovlolGamshigErsdelBuuruulah) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubUndesZovlolGamshigErsdelBuuruulah2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolGamshigErsdelBuuruulah(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSubUndesZovlolHuraldaan2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolHuraldaanᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SubUndesZovlolHuraldaan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubUndesZovlolHuraldaan2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐSubUndesZovlolHuraldaan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOViewEzBodlogiinBb2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewEzBodlogiinBbᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ViewEzBodlogiinBb) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNViewEzBodlogiinBb2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewEzBodlogiinBb(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOViewNews2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewNewsᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ViewNews) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNViewNews2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewNews(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOViewOronNutagZovlol2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewOronNutagZovlolᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ViewOronNutagZovlol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNViewOronNutagZovlol2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewOronNutagZovlol(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOViewUndesniiZovlol2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewUndesniiZovlolᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ViewUndesniiZovlol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNViewUndesniiZovlol2ᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐViewUndesniiZovlol(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) ([]*model.Filter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Filter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOfilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOfilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) (*model.Filter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputfilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx context.Context, v interface{}) ([]*model.GroupFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.GroupFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOgroupFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOgroupFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx context.Context, v interface{}) (*model.GroupFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgroupFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx context.Context, v interface{}) ([]*model.Sort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Sort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx context.Context, v interface{}) (*model.Sort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx context.Context, v interface{}) ([]*model.SubFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SubFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubFilter2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx context.Context, v interface{}) (*model.SubFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx context.Context, v interface{}) ([]*model.SubSort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SubSort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubSort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubSort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx context.Context, v interface{}) (*model.SubSort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubSort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
