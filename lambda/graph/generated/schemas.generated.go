// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"lambda/lambda/graph/model"
	"lambda/lambda/graph/models"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type QueryResolver interface {
	Persons(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, limit *int, offset *int) ([]*models.Persons, error)
	PersonItems(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, limit *int, offset *int) ([]*models.PersonItems, error)
	Paginate(ctx context.Context, sorts []*model.Sort, groupFilters []*model.GroupFilter, filters []*model.Filter, subSorts []*model.SubSort, subFilters []*model.SubFilter, page int, size int) (*model.Paginate, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_paginate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 []*model.SubSort
	if tmp, ok := rawArgs["subSorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subSorts"))
		arg3, err = ec.unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subSorts"] = arg3
	var arg4 []*model.SubFilter
	if tmp, ok := rawArgs["subFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subFilters"))
		arg4, err = ec.unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subFilters"] = arg4
	var arg5 int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg5, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg5
	var arg6 int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
		arg6, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_person_items_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_persons_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Sort
	if tmp, ok := rawArgs["sorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorts"))
		arg0, err = ec.unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sorts"] = arg0
	var arg1 []*model.GroupFilter
	if tmp, ok := rawArgs["groupFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupFilters"))
		arg1, err = ec.unmarshalOgroupFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupFilters"] = arg1
	var arg2 []*model.Filter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOfilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	var arg3 []*model.SubSort
	if tmp, ok := rawArgs["subSorts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subSorts"))
		arg3, err = ec.unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subSorts"] = arg3
	var arg4 []*model.SubFilter
	if tmp, ok := rawArgs["subFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subFilters"))
		arg4, err = ec.unmarshalOsubFilter2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subFilters"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg5
	var arg6 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg6, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg6
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Query_persons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_persons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Persons(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["subSorts"].([]*model.SubSort), fc.Args["subFilters"].([]*model.SubFilter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Persons)
	fc.Result = res
	return ec.marshalOPersons2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐPersonsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_persons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "CREATED_AT":
				return ec.fieldContext_Persons_CREATED_AT(ctx, field)
			case "DELETED_AT":
				return ec.fieldContext_Persons_DELETED_AT(ctx, field)
			case "FIRST_NAME":
				return ec.fieldContext_Persons_FIRST_NAME(ctx, field)
			case "LAST_NAME":
				return ec.fieldContext_Persons_LAST_NAME(ctx, field)
			case "PERSON_ID":
				return ec.fieldContext_Persons_PERSON_ID(ctx, field)
			case "UPDATED_AT":
				return ec.fieldContext_Persons_UPDATED_AT(ctx, field)
			case "PERSON_ITEMS":
				return ec.fieldContext_Persons_PERSON_ITEMS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Persons", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_persons_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_person_items(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_person_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PersonItems(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PersonItems)
	fc.Result = res
	return ec.marshalOPersonItems2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐPersonItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_person_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_PersonItems_ID(ctx, field)
			case "ITEM_DESCRIPTION":
				return ec.fieldContext_PersonItems_ITEM_DESCRIPTION(ctx, field)
			case "ITEM_NAME":
				return ec.fieldContext_PersonItems_ITEM_NAME(ctx, field)
			case "PERSON_ID":
				return ec.fieldContext_PersonItems_PERSON_ID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonItems", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_person_items_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_paginate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_paginate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Paginate(rctx, fc.Args["sorts"].([]*model.Sort), fc.Args["groupFilters"].([]*model.GroupFilter), fc.Args["filters"].([]*model.Filter), fc.Args["subSorts"].([]*model.SubSort), fc.Args["subFilters"].([]*model.SubFilter), fc.Args["page"].(int), fc.Args["size"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Paginate)
	fc.Result = res
	return ec.marshalNpaginate2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐPaginate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_paginate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_paginate_page(ctx, field)
			case "total":
				return ec.fieldContext_paginate_total(ctx, field)
			case "last_page":
				return ec.fieldContext_paginate_last_page(ctx, field)
			case "persons":
				return ec.fieldContext_paginate_persons(ctx, field)
			case "person_items":
				return ec.fieldContext_paginate_person_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type paginate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_paginate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_page(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_total(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_last_page(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_last_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_last_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_persons(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_persons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Persons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Persons)
	fc.Result = res
	return ec.marshalOPersons2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐPersonsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_persons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "CREATED_AT":
				return ec.fieldContext_Persons_CREATED_AT(ctx, field)
			case "DELETED_AT":
				return ec.fieldContext_Persons_DELETED_AT(ctx, field)
			case "FIRST_NAME":
				return ec.fieldContext_Persons_FIRST_NAME(ctx, field)
			case "LAST_NAME":
				return ec.fieldContext_Persons_LAST_NAME(ctx, field)
			case "PERSON_ID":
				return ec.fieldContext_Persons_PERSON_ID(ctx, field)
			case "UPDATED_AT":
				return ec.fieldContext_Persons_UPDATED_AT(ctx, field)
			case "PERSON_ITEMS":
				return ec.fieldContext_Persons_PERSON_ITEMS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Persons", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _paginate_person_items(ctx context.Context, field graphql.CollectedField, obj *model.Paginate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_paginate_person_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PersonItems)
	fc.Result = res
	return ec.marshalOPersonItems2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelsᚐPersonItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_paginate_person_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "paginate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_PersonItems_ID(ctx, field)
			case "ITEM_DESCRIPTION":
				return ec.fieldContext_PersonItems_ITEM_DESCRIPTION(ctx, field)
			case "ITEM_NAME":
				return ec.fieldContext_PersonItems_ITEM_NAME(ctx, field)
			case "PERSON_ID":
				return ec.fieldContext_PersonItems_PERSON_ID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonItems", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "persons":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_persons(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "person_items":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_person_items(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "paginate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_paginate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginateImplementors = []string{"paginate"}

func (ec *executionContext) _paginate(ctx context.Context, sel ast.SelectionSet, obj *model.Paginate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("paginate")
		case "page":

			out.Values[i] = ec._paginate_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":

			out.Values[i] = ec._paginate_total(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "last_page":

			out.Values[i] = ec._paginate_last_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "persons":

			out.Values[i] = ec._paginate_persons(ctx, field, obj)

		case "person_items":

			out.Values[i] = ec._paginate_person_items(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNpaginate2lambdaᚋlambdaᚋgraphᚋmodelᚐPaginate(ctx context.Context, sel ast.SelectionSet, v model.Paginate) graphql.Marshaler {
	return ec._paginate(ctx, sel, &v)
}

func (ec *executionContext) marshalNpaginate2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐPaginate(ctx context.Context, sel ast.SelectionSet, v *model.Paginate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._paginate(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
