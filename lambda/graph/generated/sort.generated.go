// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"lambda/lambda/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputsort(ctx context.Context, obj interface{}) (model.Sort, error) {
	var it model.Sort
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"column", "order"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubSort(ctx context.Context, obj interface{}) (model.SubSort, error) {
	var it model.SubSort
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"column", "table", "order"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "column":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("column"))
			it.Column, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "table":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("table"))
			it.Table, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx context.Context, v interface{}) (model.Order, error) {
	var res model.Order
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNorder2lambdaᚋlambdaᚋgraphᚋmodelᚐOrder(ctx context.Context, sel ast.SelectionSet, v model.Order) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOsort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx context.Context, v interface{}) ([]*model.Sort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Sort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSort(ctx context.Context, v interface{}) (*model.Sort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubSort2ᚕᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx context.Context, v interface{}) ([]*model.SubSort, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SubSort, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubSort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubSort2ᚖlambdaᚋlambdaᚋgraphᚋmodelᚐSubSort(ctx context.Context, v interface{}) (*model.SubSort, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubSort(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
